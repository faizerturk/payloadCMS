"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/immer";
exports.ids = ["vendor-chunks/immer"];
exports.modules = {

/***/ "(ssr)/./node_modules/immer/dist/immer.cjs.development.js":
/*!**********************************************************!*\
  !*** ./node_modules/immer/dist/immer.cjs.development.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar _ref;\n\n// Should be no imports here!\n// Some things that should be evaluated before all else...\n// We only want to know if non-polyfilled symbols are available\nvar hasSymbol = typeof Symbol !== \"undefined\" && typeof\n/*#__PURE__*/\nSymbol(\"x\") === \"symbol\";\nvar hasMap = typeof Map !== \"undefined\";\nvar hasSet = typeof Set !== \"undefined\";\nvar hasProxies = typeof Proxy !== \"undefined\" && typeof Proxy.revocable !== \"undefined\" && typeof Reflect !== \"undefined\";\n/**\r\n * The sentinel value returned by producers to replace the draft with undefined.\r\n */\n\nvar NOTHING = hasSymbol ?\n/*#__PURE__*/\nSymbol.for(\"immer-nothing\") : (_ref = {}, _ref[\"immer-nothing\"] = true, _ref);\n/**\r\n * To let Immer treat your class instances as plain immutable objects\r\n * (albeit with a custom prototype), you must define either an instance property\r\n * or a static property on each of your custom classes.\r\n *\r\n * Otherwise, your class instance will never be drafted, which means it won't be\r\n * safe to mutate in a produce callback.\r\n */\n\nvar DRAFTABLE = hasSymbol ?\n/*#__PURE__*/\nSymbol.for(\"immer-draftable\") : \"__$immer_draftable\";\nvar DRAFT_STATE = hasSymbol ?\n/*#__PURE__*/\nSymbol.for(\"immer-state\") : \"__$immer_state\"; // Even a polyfilled Symbol might provide Symbol.iterator\n\nvar iteratorSymbol = typeof Symbol != \"undefined\" && Symbol.iterator || \"@@iterator\";\n\nvar errors = {\n  0: \"Illegal state\",\n  1: \"Immer drafts cannot have computed properties\",\n  2: \"This object has been frozen and should not be mutated\",\n  3: function _(data) {\n    return \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + data;\n  },\n  4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n  5: \"Immer forbids circular references\",\n  6: \"The first or second argument to `produce` must be a function\",\n  7: \"The third argument to `produce` must be a function or undefined\",\n  8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n  9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n  10: \"The given draft is already finalized\",\n  11: \"Object.defineProperty() cannot be used on an Immer draft\",\n  12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n  13: \"Immer only supports deleting array indices\",\n  14: \"Immer only supports setting array indices and the 'length' property\",\n  15: function _(path) {\n    return \"Cannot apply patch, path doesn't resolve: \" + path;\n  },\n  16: 'Sets cannot have \"replace\" patches.',\n  17: function _(op) {\n    return \"Unsupported patch operation: \" + op;\n  },\n  18: function _(plugin) {\n    return \"The plugin for '\" + plugin + \"' has not been loaded into Immer. To enable the plugin, import and call `enable\" + plugin + \"()` when initializing your application.\";\n  },\n  20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n  21: function _(thing) {\n    return \"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '\" + thing + \"'\";\n  },\n  22: function _(thing) {\n    return \"'current' expects a draft, got: \" + thing;\n  },\n  23: function _(thing) {\n    return \"'original' expects a draft, got: \" + thing;\n  },\n  24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n};\nfunction die(error) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  {\n    var e = errors[error];\n    var msg = !e ? \"unknown error nr: \" + error : typeof e === \"function\" ? e.apply(null, args) : e;\n    throw new Error(\"[Immer] \" + msg);\n  }\n}\n\n/** Returns true if the given value is an Immer draft */\n\n/*#__PURE__*/\n\nfunction isDraft(value) {\n  return !!value && !!value[DRAFT_STATE];\n}\n/** Returns true if the given value can be drafted by Immer */\n\n/*#__PURE__*/\n\nfunction isDraftable(value) {\n  var _value$constructor;\n\n  if (!value) return false;\n  return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!((_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor[DRAFTABLE]) || isMap(value) || isSet(value);\n}\nvar objectCtorString =\n/*#__PURE__*/\nObject.prototype.constructor.toString();\n/*#__PURE__*/\n\nfunction isPlainObject(value) {\n  if (!value || typeof value !== \"object\") return false;\n  var proto = Object.getPrototypeOf(value);\n\n  if (proto === null) {\n    return true;\n  }\n\n  var Ctor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n  if (Ctor === Object) return true;\n  return typeof Ctor == \"function\" && Function.toString.call(Ctor) === objectCtorString;\n}\nfunction original(value) {\n  if (!isDraft(value)) die(23, value);\n  return value[DRAFT_STATE].base_;\n}\n/*#__PURE__*/\n\nvar ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} :\n/* istanbul ignore next */\nObject.getOwnPropertyNames;\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {\n  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n  var res = {};\n  ownKeys(target).forEach(function (key) {\n    res[key] = Object.getOwnPropertyDescriptor(target, key);\n  });\n  return res;\n};\nfunction each(obj, iter, enumerableOnly) {\n  if (enumerableOnly === void 0) {\n    enumerableOnly = false;\n  }\n\n  if (getArchtype(obj) === 0\n  /* Object */\n  ) {\n      (enumerableOnly ? Object.keys : ownKeys)(obj).forEach(function (key) {\n        if (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj);\n      });\n    } else {\n    obj.forEach(function (entry, index) {\n      return iter(index, entry, obj);\n    });\n  }\n}\n/*#__PURE__*/\n\nfunction getArchtype(thing) {\n  /* istanbul ignore next */\n  var state = thing[DRAFT_STATE];\n  return state ? state.type_ > 3 ? state.type_ - 4 // cause Object and Array map back from 4 and 5\n  : state.type_ // others are the same\n  : Array.isArray(thing) ? 1\n  /* Array */\n  : isMap(thing) ? 2\n  /* Map */\n  : isSet(thing) ? 3\n  /* Set */\n  : 0\n  /* Object */\n  ;\n}\n/*#__PURE__*/\n\nfunction has(thing, prop) {\n  return getArchtype(thing) === 2\n  /* Map */\n  ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);\n}\n/*#__PURE__*/\n\nfunction get(thing, prop) {\n  // @ts-ignore\n  return getArchtype(thing) === 2\n  /* Map */\n  ? thing.get(prop) : thing[prop];\n}\n/*#__PURE__*/\n\nfunction set(thing, propOrOldValue, value) {\n  var t = getArchtype(thing);\n  if (t === 2\n  /* Map */\n  ) thing.set(propOrOldValue, value);else if (t === 3\n  /* Set */\n  ) {\n      thing.add(value);\n    } else thing[propOrOldValue] = value;\n}\n/*#__PURE__*/\n\nfunction is(x, y) {\n  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n/*#__PURE__*/\n\nfunction isMap(target) {\n  return hasMap && target instanceof Map;\n}\n/*#__PURE__*/\n\nfunction isSet(target) {\n  return hasSet && target instanceof Set;\n}\n/*#__PURE__*/\n\nfunction latest(state) {\n  return state.copy_ || state.base_;\n}\n/*#__PURE__*/\n\nfunction shallowCopy(base) {\n  if (Array.isArray(base)) return Array.prototype.slice.call(base);\n  var descriptors = getOwnPropertyDescriptors(base);\n  delete descriptors[DRAFT_STATE];\n  var keys = ownKeys(descriptors);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var desc = descriptors[key];\n\n    if (desc.writable === false) {\n      desc.writable = true;\n      desc.configurable = true;\n    } // like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n    // with libraries that trap values, like mobx or vue\n    // unlike object.assign, non-enumerables will be copied as well\n\n\n    if (desc.get || desc.set) descriptors[key] = {\n      configurable: true,\n      writable: true,\n      enumerable: desc.enumerable,\n      value: base[key]\n    };\n  }\n\n  return Object.create(Object.getPrototypeOf(base), descriptors);\n}\nfunction freeze(obj, deep) {\n  if (deep === void 0) {\n    deep = false;\n  }\n\n  if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj;\n\n  if (getArchtype(obj) > 1\n  /* Map or Set */\n  ) {\n      obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;\n    }\n\n  Object.freeze(obj);\n  if (deep) each(obj, function (key, value) {\n    return freeze(value, true);\n  }, true);\n  return obj;\n}\n\nfunction dontMutateFrozenCollections() {\n  die(2);\n}\n\nfunction isFrozen(obj) {\n  if (obj == null || typeof obj !== \"object\") return true; // See #600, IE dies on non-objects in Object.isFrozen\n\n  return Object.isFrozen(obj);\n}\n\n/** Plugin utilities */\n\nvar plugins = {};\nfunction getPlugin(pluginKey) {\n  var plugin = plugins[pluginKey];\n\n  if (!plugin) {\n    die(18, pluginKey);\n  } // @ts-ignore\n\n\n  return plugin;\n}\nfunction loadPlugin(pluginKey, implementation) {\n  if (!plugins[pluginKey]) plugins[pluginKey] = implementation;\n}\n\nvar currentScope;\nfunction getCurrentScope() {\n  if ( !currentScope) die(0);\n  return currentScope;\n}\n\nfunction createScope(parent_, immer_) {\n  return {\n    drafts_: [],\n    parent_: parent_,\n    immer_: immer_,\n    // Whenever the modified draft contains a draft from another scope, we\n    // need to prevent auto-freezing so the unowned draft can be finalized.\n    canAutoFreeze_: true,\n    unfinalizedDrafts_: 0\n  };\n}\n\nfunction usePatchesInScope(scope, patchListener) {\n  if (patchListener) {\n    getPlugin(\"Patches\"); // assert we have the plugin\n\n    scope.patches_ = [];\n    scope.inversePatches_ = [];\n    scope.patchListener_ = patchListener;\n  }\n}\nfunction revokeScope(scope) {\n  leaveScope(scope);\n  scope.drafts_.forEach(revokeDraft); // @ts-ignore\n\n  scope.drafts_ = null;\n}\nfunction leaveScope(scope) {\n  if (scope === currentScope) {\n    currentScope = scope.parent_;\n  }\n}\nfunction enterScope(immer) {\n  return currentScope = createScope(currentScope, immer);\n}\n\nfunction revokeDraft(draft) {\n  var state = draft[DRAFT_STATE];\n  if (state.type_ === 0\n  /* ProxyObject */\n  || state.type_ === 1\n  /* ProxyArray */\n  ) state.revoke_();else state.revoked_ = true;\n}\n\nfunction processResult(result, scope) {\n  scope.unfinalizedDrafts_ = scope.drafts_.length;\n  var baseDraft = scope.drafts_[0];\n  var isReplaced = result !== undefined && result !== baseDraft;\n  if (!scope.immer_.useProxies_) getPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced);\n\n  if (isReplaced) {\n    if (baseDraft[DRAFT_STATE].modified_) {\n      revokeScope(scope);\n      die(4);\n    }\n\n    if (isDraftable(result)) {\n      // Finalize the result in case it contains (or is) a subset of the draft.\n      result = finalize(scope, result);\n      if (!scope.parent_) maybeFreeze(scope, result);\n    }\n\n    if (scope.patches_) {\n      getPlugin(\"Patches\").generateReplacementPatches_(baseDraft[DRAFT_STATE].base_, result, scope.patches_, scope.inversePatches_);\n    }\n  } else {\n    // Finalize the base draft.\n    result = finalize(scope, baseDraft, []);\n  }\n\n  revokeScope(scope);\n\n  if (scope.patches_) {\n    scope.patchListener_(scope.patches_, scope.inversePatches_);\n  }\n\n  return result !== NOTHING ? result : undefined;\n}\n\nfunction finalize(rootScope, value, path) {\n  // Don't recurse in tho recursive data structures\n  if (isFrozen(value)) return value;\n  var state = value[DRAFT_STATE]; // A plain object, might need freezing, might contain drafts\n\n  if (!state) {\n    each(value, function (key, childValue) {\n      return finalizeProperty(rootScope, state, value, key, childValue, path);\n    }, true // See #590, don't recurse into non-enumerable of non drafted objects\n    );\n    return value;\n  } // Never finalize drafts owned by another scope.\n\n\n  if (state.scope_ !== rootScope) return value; // Unmodified draft, return the (frozen) original\n\n  if (!state.modified_) {\n    maybeFreeze(rootScope, state.base_, true);\n    return state.base_;\n  } // Not finalized yet, let's do that now\n\n\n  if (!state.finalized_) {\n    state.finalized_ = true;\n    state.scope_.unfinalizedDrafts_--;\n    var result = // For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n    state.type_ === 4\n    /* ES5Object */\n    || state.type_ === 5\n    /* ES5Array */\n    ? state.copy_ = shallowCopy(state.draft_) : state.copy_; // Finalize all children of the copy\n    // For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n    // To preserve insertion order in all cases we then clear the set\n    // And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\n    var resultEach = result;\n    var isSet = false;\n\n    if (state.type_ === 3\n    /* Set */\n    ) {\n        resultEach = new Set(result);\n        result.clear();\n        isSet = true;\n      }\n\n    each(resultEach, function (key, childValue) {\n      return finalizeProperty(rootScope, state, result, key, childValue, path, isSet);\n    }); // everything inside is frozen, we can freeze here\n\n    maybeFreeze(rootScope, result, false); // first time finalizing, let's create those patches\n\n    if (path && rootScope.patches_) {\n      getPlugin(\"Patches\").generatePatches_(state, path, rootScope.patches_, rootScope.inversePatches_);\n    }\n  }\n\n  return state.copy_;\n}\n\nfunction finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {\n  if ( childValue === targetObject) die(5);\n\n  if (isDraft(childValue)) {\n    var path = rootPath && parentState && parentState.type_ !== 3\n    /* Set */\n    && // Set objects are atomic since they have no keys.\n    !has(parentState.assigned_, prop) // Skip deep patches for assigned keys.\n    ? rootPath.concat(prop) : undefined; // Drafts owned by `scope` are finalized here.\n\n    var res = finalize(rootScope, childValue, path);\n    set(targetObject, prop, res); // Drafts from another scope must prevented to be frozen\n    // if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\n    if (isDraft(res)) {\n      rootScope.canAutoFreeze_ = false;\n    } else return;\n  } else if (targetIsSet) {\n    targetObject.add(childValue);\n  } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\n\n  if (isDraftable(childValue) && !isFrozen(childValue)) {\n    if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n      // optimization: if an object is not a draft, and we don't have to\n      // deepfreeze everything, and we are sure that no drafts are left in the remaining object\n      // cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n      // This benefits especially adding large data tree's without further processing.\n      // See add-data.js perf test\n      return;\n    }\n\n    finalize(rootScope, childValue); // immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\n    if (!parentState || !parentState.scope_.parent_) maybeFreeze(rootScope, childValue);\n  }\n}\n\nfunction maybeFreeze(scope, value, deep) {\n  if (deep === void 0) {\n    deep = false;\n  }\n\n  // we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n  if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n    freeze(value, deep);\n  }\n}\n\n/**\r\n * Returns a new draft of the `base` object.\r\n *\r\n * The second argument is the parent draft-state (used internally).\r\n */\n\nfunction createProxyProxy(base, parent) {\n  var isArray = Array.isArray(base);\n  var state = {\n    type_: isArray ? 1\n    /* ProxyArray */\n    : 0\n    /* ProxyObject */\n    ,\n    // Track which produce call this is associated with.\n    scope_: parent ? parent.scope_ : getCurrentScope(),\n    // True for both shallow and deep changes.\n    modified_: false,\n    // Used during finalization.\n    finalized_: false,\n    // Track which properties have been assigned (true) or deleted (false).\n    assigned_: {},\n    // The parent draft state.\n    parent_: parent,\n    // The base state.\n    base_: base,\n    // The base proxy.\n    draft_: null,\n    // The base copy with any updated values.\n    copy_: null,\n    // Called by the `produce` function.\n    revoke_: null,\n    isManual_: false\n  }; // the traps must target something, a bit like the 'real' base.\n  // but also, we need to be able to determine from the target what the relevant state is\n  // (to avoid creating traps per instance to capture the state in closure,\n  // and to avoid creating weird hidden properties as well)\n  // So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n  // Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\n  var target = state;\n  var traps = objectTraps;\n\n  if (isArray) {\n    target = [state];\n    traps = arrayTraps;\n  }\n\n  var _Proxy$revocable = Proxy.revocable(target, traps),\n      revoke = _Proxy$revocable.revoke,\n      proxy = _Proxy$revocable.proxy;\n\n  state.draft_ = proxy;\n  state.revoke_ = revoke;\n  return proxy;\n}\n/**\r\n * Object drafts\r\n */\n\nvar objectTraps = {\n  get: function get(state, prop) {\n    if (prop === DRAFT_STATE) return state;\n    var source = latest(state);\n\n    if (!has(source, prop)) {\n      // non-existing or non-own property...\n      return readPropFromProto(state, source, prop);\n    }\n\n    var value = source[prop];\n\n    if (state.finalized_ || !isDraftable(value)) {\n      return value;\n    } // Check for existing draft in modified state.\n    // Assigned values are never drafted. This catches any drafts we created, too.\n\n\n    if (value === peek(state.base_, prop)) {\n      prepareCopy(state);\n      return state.copy_[prop] = createProxy(state.scope_.immer_, value, state);\n    }\n\n    return value;\n  },\n  has: function has(state, prop) {\n    return prop in latest(state);\n  },\n  ownKeys: function ownKeys(state) {\n    return Reflect.ownKeys(latest(state));\n  },\n  set: function set(state, prop\n  /* strictly not, but helps TS */\n  , value) {\n    var desc = getDescriptorFromProto(latest(state), prop);\n\n    if (desc === null || desc === void 0 ? void 0 : desc.set) {\n      // special case: if this write is captured by a setter, we have\n      // to trigger it with the correct context\n      desc.set.call(state.draft_, value);\n      return true;\n    }\n\n    if (!state.modified_) {\n      // the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n      // from setting an existing property with value undefined to undefined (which is not a change)\n      var current = peek(latest(state), prop); // special case, if we assigning the original value to a draft, we can ignore the assignment\n\n      var currentState = current === null || current === void 0 ? void 0 : current[DRAFT_STATE];\n\n      if (currentState && currentState.base_ === value) {\n        state.copy_[prop] = value;\n        state.assigned_[prop] = false;\n        return true;\n      }\n\n      if (is(value, current) && (value !== undefined || has(state.base_, prop))) return true;\n      prepareCopy(state);\n      markChanged(state);\n    }\n\n    if (state.copy_[prop] === value && ( // special case: handle new props with value 'undefined'\n    value !== undefined || prop in state.copy_) || // special case: NaN\n    Number.isNaN(value) && Number.isNaN(state.copy_[prop])) return true; // @ts-ignore\n\n    state.copy_[prop] = value;\n    state.assigned_[prop] = true;\n    return true;\n  },\n  deleteProperty: function deleteProperty(state, prop) {\n    // The `undefined` check is a fast path for pre-existing keys.\n    if (peek(state.base_, prop) !== undefined || prop in state.base_) {\n      state.assigned_[prop] = false;\n      prepareCopy(state);\n      markChanged(state);\n    } else {\n      // if an originally not assigned property was deleted\n      delete state.assigned_[prop];\n    } // @ts-ignore\n\n\n    if (state.copy_) delete state.copy_[prop];\n    return true;\n  },\n  // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n  // the same guarantee in ES5 mode.\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(state, prop) {\n    var owner = latest(state);\n    var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n    if (!desc) return desc;\n    return {\n      writable: true,\n      configurable: state.type_ !== 1\n      /* ProxyArray */\n      || prop !== \"length\",\n      enumerable: desc.enumerable,\n      value: owner[prop]\n    };\n  },\n  defineProperty: function defineProperty() {\n    die(11);\n  },\n  getPrototypeOf: function getPrototypeOf(state) {\n    return Object.getPrototypeOf(state.base_);\n  },\n  setPrototypeOf: function setPrototypeOf() {\n    die(12);\n  }\n};\n/**\r\n * Array drafts\r\n */\n\nvar arrayTraps = {};\neach(objectTraps, function (key, fn) {\n  // @ts-ignore\n  arrayTraps[key] = function () {\n    arguments[0] = arguments[0][0];\n    return fn.apply(this, arguments);\n  };\n});\n\narrayTraps.deleteProperty = function (state, prop) {\n  if ( isNaN(parseInt(prop))) die(13); // @ts-ignore\n\n  return arrayTraps.set.call(this, state, prop, undefined);\n};\n\narrayTraps.set = function (state, prop, value) {\n  if ( prop !== \"length\" && isNaN(parseInt(prop))) die(14);\n  return objectTraps.set.call(this, state[0], prop, value, state[0]);\n}; // Access a property without creating an Immer draft.\n\n\nfunction peek(draft, prop) {\n  var state = draft[DRAFT_STATE];\n  var source = state ? latest(state) : draft;\n  return source[prop];\n}\n\nfunction readPropFromProto(state, source, prop) {\n  var _desc$get;\n\n  var desc = getDescriptorFromProto(source, prop);\n  return desc ? \"value\" in desc ? desc.value : // This is a very special case, if the prop is a getter defined by the\n  // prototype, we should invoke it with the draft as context!\n  (_desc$get = desc.get) === null || _desc$get === void 0 ? void 0 : _desc$get.call(state.draft_) : undefined;\n}\n\nfunction getDescriptorFromProto(source, prop) {\n  // 'in' checks proto!\n  if (!(prop in source)) return undefined;\n  var proto = Object.getPrototypeOf(source);\n\n  while (proto) {\n    var desc = Object.getOwnPropertyDescriptor(proto, prop);\n    if (desc) return desc;\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return undefined;\n}\n\nfunction markChanged(state) {\n  if (!state.modified_) {\n    state.modified_ = true;\n\n    if (state.parent_) {\n      markChanged(state.parent_);\n    }\n  }\n}\nfunction prepareCopy(state) {\n  if (!state.copy_) {\n    state.copy_ = shallowCopy(state.base_);\n  }\n}\n\nvar Immer =\n/*#__PURE__*/\nfunction () {\n  function Immer(config) {\n    var _this = this;\n\n    this.useProxies_ = hasProxies;\n    this.autoFreeze_ = true;\n    /**\r\n     * The `produce` function takes a value and a \"recipe function\" (whose\r\n     * return value often depends on the base state). The recipe function is\r\n     * free to mutate its first argument however it wants. All mutations are\r\n     * only ever applied to a __copy__ of the base state.\r\n     *\r\n     * Pass only a function to create a \"curried producer\" which relieves you\r\n     * from passing the recipe function every time.\r\n     *\r\n     * Only plain objects and arrays are made mutable. All other objects are\r\n     * considered uncopyable.\r\n     *\r\n     * Note: This function is __bound__ to its `Immer` instance.\r\n     *\r\n     * @param {any} base - the initial state\r\n     * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\r\n     * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n     * @returns {any} a new state, or the initial state if nothing was modified\r\n     */\n\n    this.produce = function (base, recipe, patchListener) {\n      // curried invocation\n      if (typeof base === \"function\" && typeof recipe !== \"function\") {\n        var defaultBase = recipe;\n        recipe = base;\n        var self = _this;\n        return function curriedProduce(base) {\n          var _this2 = this;\n\n          if (base === void 0) {\n            base = defaultBase;\n          }\n\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          return self.produce(base, function (draft) {\n            var _recipe;\n\n            return (_recipe = recipe).call.apply(_recipe, [_this2, draft].concat(args));\n          }); // prettier-ignore\n        };\n      }\n\n      if (typeof recipe !== \"function\") die(6);\n      if (patchListener !== undefined && typeof patchListener !== \"function\") die(7);\n      var result; // Only plain objects, arrays, and \"immerable classes\" are drafted.\n\n      if (isDraftable(base)) {\n        var scope = enterScope(_this);\n        var proxy = createProxy(_this, base, undefined);\n        var hasError = true;\n\n        try {\n          result = recipe(proxy);\n          hasError = false;\n        } finally {\n          // finally instead of catch + rethrow better preserves original stack\n          if (hasError) revokeScope(scope);else leaveScope(scope);\n        }\n\n        if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n          return result.then(function (result) {\n            usePatchesInScope(scope, patchListener);\n            return processResult(result, scope);\n          }, function (error) {\n            revokeScope(scope);\n            throw error;\n          });\n        }\n\n        usePatchesInScope(scope, patchListener);\n        return processResult(result, scope);\n      } else if (!base || typeof base !== \"object\") {\n        result = recipe(base);\n        if (result === undefined) result = base;\n        if (result === NOTHING) result = undefined;\n        if (_this.autoFreeze_) freeze(result, true);\n\n        if (patchListener) {\n          var p = [];\n          var ip = [];\n          getPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip);\n          patchListener(p, ip);\n        }\n\n        return result;\n      } else die(21, base);\n    };\n\n    this.produceWithPatches = function (base, recipe) {\n      // curried invocation\n      if (typeof base === \"function\") {\n        return function (state) {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          return _this.produceWithPatches(state, function (draft) {\n            return base.apply(void 0, [draft].concat(args));\n          });\n        };\n      }\n\n      var patches, inversePatches;\n\n      var result = _this.produce(base, recipe, function (p, ip) {\n        patches = p;\n        inversePatches = ip;\n      });\n\n      if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n        return result.then(function (nextState) {\n          return [nextState, patches, inversePatches];\n        });\n      }\n\n      return [result, patches, inversePatches];\n    };\n\n    if (typeof (config === null || config === void 0 ? void 0 : config.useProxies) === \"boolean\") this.setUseProxies(config.useProxies);\n    if (typeof (config === null || config === void 0 ? void 0 : config.autoFreeze) === \"boolean\") this.setAutoFreeze(config.autoFreeze);\n  }\n\n  var _proto = Immer.prototype;\n\n  _proto.createDraft = function createDraft(base) {\n    if (!isDraftable(base)) die(8);\n    if (isDraft(base)) base = current(base);\n    var scope = enterScope(this);\n    var proxy = createProxy(this, base, undefined);\n    proxy[DRAFT_STATE].isManual_ = true;\n    leaveScope(scope);\n    return proxy;\n  };\n\n  _proto.finishDraft = function finishDraft(draft, patchListener) {\n    var state = draft && draft[DRAFT_STATE];\n\n    {\n      if (!state || !state.isManual_) die(9);\n      if (state.finalized_) die(10);\n    }\n\n    var scope = state.scope_;\n    usePatchesInScope(scope, patchListener);\n    return processResult(undefined, scope);\n  }\n  /**\r\n   * Pass true to automatically freeze all copies created by Immer.\r\n   *\r\n   * By default, auto-freezing is enabled.\r\n   */\n  ;\n\n  _proto.setAutoFreeze = function setAutoFreeze(value) {\n    this.autoFreeze_ = value;\n  }\n  /**\r\n   * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n   * always faster than using ES5 proxies.\r\n   *\r\n   * By default, feature detection is used, so calling this is rarely necessary.\r\n   */\n  ;\n\n  _proto.setUseProxies = function setUseProxies(value) {\n    if (value && !hasProxies) {\n      die(20);\n    }\n\n    this.useProxies_ = value;\n  };\n\n  _proto.applyPatches = function applyPatches(base, patches) {\n    // If a patch replaces the entire state, take that replacement as base\n    // before applying patches\n    var i;\n\n    for (i = patches.length - 1; i >= 0; i--) {\n      var patch = patches[i];\n\n      if (patch.path.length === 0 && patch.op === \"replace\") {\n        base = patch.value;\n        break;\n      }\n    } // If there was a patch that replaced the entire state, start from the\n    // patch after that.\n\n\n    if (i > -1) {\n      patches = patches.slice(i + 1);\n    }\n\n    var applyPatchesImpl = getPlugin(\"Patches\").applyPatches_;\n\n    if (isDraft(base)) {\n      // N.B: never hits if some patch a replacement, patches are never drafts\n      return applyPatchesImpl(base, patches);\n    } // Otherwise, produce a copy of the base state.\n\n\n    return this.produce(base, function (draft) {\n      return applyPatchesImpl(draft, patches);\n    });\n  };\n\n  return Immer;\n}();\nfunction createProxy(immer, value, parent) {\n  // precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n  var draft = isMap(value) ? getPlugin(\"MapSet\").proxyMap_(value, parent) : isSet(value) ? getPlugin(\"MapSet\").proxySet_(value, parent) : immer.useProxies_ ? createProxyProxy(value, parent) : getPlugin(\"ES5\").createES5Proxy_(value, parent);\n  var scope = parent ? parent.scope_ : getCurrentScope();\n  scope.drafts_.push(draft);\n  return draft;\n}\n\nfunction current(value) {\n  if (!isDraft(value)) die(22, value);\n  return currentImpl(value);\n}\n\nfunction currentImpl(value) {\n  if (!isDraftable(value)) return value;\n  var state = value[DRAFT_STATE];\n  var copy;\n  var archType = getArchtype(value);\n\n  if (state) {\n    if (!state.modified_ && (state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state))) return state.base_; // Optimization: avoid generating new drafts during copying\n\n    state.finalized_ = true;\n    copy = copyHelper(value, archType);\n    state.finalized_ = false;\n  } else {\n    copy = copyHelper(value, archType);\n  }\n\n  each(copy, function (key, childValue) {\n    if (state && get(state.base_, key) === childValue) return; // no need to copy or search in something that didn't change\n\n    set(copy, key, currentImpl(childValue));\n  }); // In the future, we might consider freezing here, based on the current settings\n\n  return archType === 3\n  /* Set */\n  ? new Set(copy) : copy;\n}\n\nfunction copyHelper(value, archType) {\n  // creates a shallow copy, even if it is a map or set\n  switch (archType) {\n    case 2\n    /* Map */\n    :\n      return new Map(value);\n\n    case 3\n    /* Set */\n    :\n      // Set will be cloned as array temporarily, so that we can replace individual items\n      return Array.from(value);\n  }\n\n  return shallowCopy(value);\n}\n\nfunction enableES5() {\n  function willFinalizeES5_(scope, result, isReplaced) {\n    if (!isReplaced) {\n      if (scope.patches_) {\n        markChangesRecursively(scope.drafts_[0]);\n      } // This is faster when we don't care about which attributes changed.\n\n\n      markChangesSweep(scope.drafts_);\n    } // When a child draft is returned, look for changes.\n    else if (isDraft(result) && result[DRAFT_STATE].scope_ === scope) {\n        markChangesSweep(scope.drafts_);\n      }\n  }\n\n  function createES5Draft(isArray, base) {\n    if (isArray) {\n      var draft = new Array(base.length);\n\n      for (var i = 0; i < base.length; i++) {\n        Object.defineProperty(draft, \"\" + i, proxyProperty(i, true));\n      }\n\n      return draft;\n    } else {\n      var _descriptors = getOwnPropertyDescriptors(base);\n\n      delete _descriptors[DRAFT_STATE];\n      var keys = ownKeys(_descriptors);\n\n      for (var _i = 0; _i < keys.length; _i++) {\n        var key = keys[_i];\n        _descriptors[key] = proxyProperty(key, isArray || !!_descriptors[key].enumerable);\n      }\n\n      return Object.create(Object.getPrototypeOf(base), _descriptors);\n    }\n  }\n\n  function createES5Proxy_(base, parent) {\n    var isArray = Array.isArray(base);\n    var draft = createES5Draft(isArray, base);\n    var state = {\n      type_: isArray ? 5\n      /* ES5Array */\n      : 4\n      /* ES5Object */\n      ,\n      scope_: parent ? parent.scope_ : getCurrentScope(),\n      modified_: false,\n      finalized_: false,\n      assigned_: {},\n      parent_: parent,\n      // base is the object we are drafting\n      base_: base,\n      // draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n      draft_: draft,\n      copy_: null,\n      revoked_: false,\n      isManual_: false\n    };\n    Object.defineProperty(draft, DRAFT_STATE, {\n      value: state,\n      // enumerable: false <- the default\n      writable: true\n    });\n    return draft;\n  } // property descriptors are recycled to make sure we don't create a get and set closure per property,\n  // but share them all instead\n\n\n  var descriptors = {};\n\n  function proxyProperty(prop, enumerable) {\n    var desc = descriptors[prop];\n\n    if (desc) {\n      desc.enumerable = enumerable;\n    } else {\n      descriptors[prop] = desc = {\n        configurable: true,\n        enumerable: enumerable,\n        get: function get() {\n          var state = this[DRAFT_STATE];\n          assertUnrevoked(state); // @ts-ignore\n\n          return objectTraps.get(state, prop);\n        },\n        set: function set(value) {\n          var state = this[DRAFT_STATE];\n          assertUnrevoked(state); // @ts-ignore\n\n          objectTraps.set(state, prop, value);\n        }\n      };\n    }\n\n    return desc;\n  } // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\n\n  function markChangesSweep(drafts) {\n    // The natural order of drafts in the `scope` array is based on when they\n    // were accessed. By processing drafts in reverse natural order, we have a\n    // better chance of processing leaf nodes first. When a leaf node is known to\n    // have changed, we can avoid any traversal of its ancestor nodes.\n    for (var i = drafts.length - 1; i >= 0; i--) {\n      var state = drafts[i][DRAFT_STATE];\n\n      if (!state.modified_) {\n        switch (state.type_) {\n          case 5\n          /* ES5Array */\n          :\n            if (hasArrayChanges(state)) markChanged(state);\n            break;\n\n          case 4\n          /* ES5Object */\n          :\n            if (hasObjectChanges(state)) markChanged(state);\n            break;\n        }\n      }\n    }\n  }\n\n  function markChangesRecursively(object) {\n    if (!object || typeof object !== \"object\") return;\n    var state = object[DRAFT_STATE];\n    if (!state) return;\n    var base_ = state.base_,\n        draft_ = state.draft_,\n        assigned_ = state.assigned_,\n        type_ = state.type_;\n\n    if (type_ === 4\n    /* ES5Object */\n    ) {\n        // Look for added keys.\n        // probably there is a faster way to detect changes, as sweep + recurse seems to do some\n        // unnecessary work.\n        // also: probably we can store the information we detect here, to speed up tree finalization!\n        each(draft_, function (key) {\n          if (key === DRAFT_STATE) return; // The `undefined` check is a fast path for pre-existing keys.\n\n          if (base_[key] === undefined && !has(base_, key)) {\n            assigned_[key] = true;\n            markChanged(state);\n          } else if (!assigned_[key]) {\n            // Only untouched properties trigger recursion.\n            markChangesRecursively(draft_[key]);\n          }\n        }); // Look for removed keys.\n\n        each(base_, function (key) {\n          // The `undefined` check is a fast path for pre-existing keys.\n          if (draft_[key] === undefined && !has(draft_, key)) {\n            assigned_[key] = false;\n            markChanged(state);\n          }\n        });\n      } else if (type_ === 5\n    /* ES5Array */\n    ) {\n        if (hasArrayChanges(state)) {\n          markChanged(state);\n          assigned_.length = true;\n        }\n\n        if (draft_.length < base_.length) {\n          for (var i = draft_.length; i < base_.length; i++) {\n            assigned_[i] = false;\n          }\n        } else {\n          for (var _i2 = base_.length; _i2 < draft_.length; _i2++) {\n            assigned_[_i2] = true;\n          }\n        } // Minimum count is enough, the other parts has been processed.\n\n\n        var min = Math.min(draft_.length, base_.length);\n\n        for (var _i3 = 0; _i3 < min; _i3++) {\n          // Only untouched indices trigger recursion.\n          if (!draft_.hasOwnProperty(_i3)) {\n            assigned_[_i3] = true;\n          }\n\n          if (assigned_[_i3] === undefined) markChangesRecursively(draft_[_i3]);\n        }\n      }\n  }\n\n  function hasObjectChanges(state) {\n    var base_ = state.base_,\n        draft_ = state.draft_; // Search for added keys and changed keys. Start at the back, because\n    // non-numeric keys are ordered by time of definition on the object.\n\n    var keys = ownKeys(draft_);\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      var key = keys[i];\n      if (key === DRAFT_STATE) continue;\n      var baseValue = base_[key]; // The `undefined` check is a fast path for pre-existing keys.\n\n      if (baseValue === undefined && !has(base_, key)) {\n        return true;\n      } // Once a base key is deleted, future changes go undetected, because its\n      // descriptor is erased. This branch detects any missed changes.\n      else {\n          var value = draft_[key];\n\n          var _state = value && value[DRAFT_STATE];\n\n          if (_state ? _state.base_ !== baseValue : !is(value, baseValue)) {\n            return true;\n          }\n        }\n    } // At this point, no keys were added or changed.\n    // Compare key count to determine if keys were deleted.\n\n\n    var baseIsDraft = !!base_[DRAFT_STATE];\n    return keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1); // + 1 to correct for DRAFT_STATE\n  }\n\n  function hasArrayChanges(state) {\n    var draft_ = state.draft_;\n    if (draft_.length !== state.base_.length) return true; // See #116\n    // If we first shorten the length, our array interceptors will be removed.\n    // If after that new items are added, result in the same original length,\n    // those last items will have no intercepting property.\n    // So if there is no own descriptor on the last position, we know that items were removed and added\n    // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n    // the last one\n    // last descriptor can be not a trap, if the array was extended\n\n    var descriptor = Object.getOwnPropertyDescriptor(draft_, draft_.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\n    if (descriptor && !descriptor.get) return true; // if we miss a property, it has been deleted, so array probobaly changed\n\n    for (var i = 0; i < draft_.length; i++) {\n      if (!draft_.hasOwnProperty(i)) return true;\n    } // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\n\n    return false;\n  }\n\n  function hasChanges_(state) {\n    return state.type_ === 4\n    /* ES5Object */\n    ? hasObjectChanges(state) : hasArrayChanges(state);\n  }\n\n  function assertUnrevoked(state\n  /*ES5State | MapState | SetState*/\n  ) {\n    if (state.revoked_) die(3, JSON.stringify(latest(state)));\n  }\n\n  loadPlugin(\"ES5\", {\n    createES5Proxy_: createES5Proxy_,\n    willFinalizeES5_: willFinalizeES5_,\n    hasChanges_: hasChanges_\n  });\n}\n\nfunction enablePatches() {\n  var REPLACE = \"replace\";\n  var ADD = \"add\";\n  var REMOVE = \"remove\";\n\n  function generatePatches_(state, basePath, patches, inversePatches) {\n    switch (state.type_) {\n      case 0\n      /* ProxyObject */\n      :\n      case 4\n      /* ES5Object */\n      :\n      case 2\n      /* Map */\n      :\n        return generatePatchesFromAssigned(state, basePath, patches, inversePatches);\n\n      case 5\n      /* ES5Array */\n      :\n      case 1\n      /* ProxyArray */\n      :\n        return generateArrayPatches(state, basePath, patches, inversePatches);\n\n      case 3\n      /* Set */\n      :\n        return generateSetPatches(state, basePath, patches, inversePatches);\n    }\n  }\n\n  function generateArrayPatches(state, basePath, patches, inversePatches) {\n    var base_ = state.base_,\n        assigned_ = state.assigned_;\n    var copy_ = state.copy_; // Reduce complexity by ensuring `base` is never longer.\n\n    if (copy_.length < base_.length) {\n      var _ref = [copy_, base_];\n      base_ = _ref[0];\n      copy_ = _ref[1];\n      var _ref2 = [inversePatches, patches];\n      patches = _ref2[0];\n      inversePatches = _ref2[1];\n    } // Process replaced indices.\n\n\n    for (var i = 0; i < base_.length; i++) {\n      if (assigned_[i] && copy_[i] !== base_[i]) {\n        var path = basePath.concat([i]);\n        patches.push({\n          op: REPLACE,\n          path: path,\n          // Need to maybe clone it, as it can in fact be the original value\n          // due to the base/copy inversion at the start of this function\n          value: clonePatchValueIfNeeded(copy_[i])\n        });\n        inversePatches.push({\n          op: REPLACE,\n          path: path,\n          value: clonePatchValueIfNeeded(base_[i])\n        });\n      }\n    } // Process added indices.\n\n\n    for (var _i = base_.length; _i < copy_.length; _i++) {\n      var _path = basePath.concat([_i]);\n\n      patches.push({\n        op: ADD,\n        path: _path,\n        // Need to maybe clone it, as it can in fact be the original value\n        // due to the base/copy inversion at the start of this function\n        value: clonePatchValueIfNeeded(copy_[_i])\n      });\n    }\n\n    if (base_.length < copy_.length) {\n      inversePatches.push({\n        op: REPLACE,\n        path: basePath.concat([\"length\"]),\n        value: base_.length\n      });\n    }\n  } // This is used for both Map objects and normal objects.\n\n\n  function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {\n    var base_ = state.base_,\n        copy_ = state.copy_;\n    each(state.assigned_, function (key, assignedValue) {\n      var origValue = get(base_, key);\n      var value = get(copy_, key);\n      var op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD;\n      if (origValue === value && op === REPLACE) return;\n      var path = basePath.concat(key);\n      patches.push(op === REMOVE ? {\n        op: op,\n        path: path\n      } : {\n        op: op,\n        path: path,\n        value: value\n      });\n      inversePatches.push(op === ADD ? {\n        op: REMOVE,\n        path: path\n      } : op === REMOVE ? {\n        op: ADD,\n        path: path,\n        value: clonePatchValueIfNeeded(origValue)\n      } : {\n        op: REPLACE,\n        path: path,\n        value: clonePatchValueIfNeeded(origValue)\n      });\n    });\n  }\n\n  function generateSetPatches(state, basePath, patches, inversePatches) {\n    var base_ = state.base_,\n        copy_ = state.copy_;\n    var i = 0;\n    base_.forEach(function (value) {\n      if (!copy_.has(value)) {\n        var path = basePath.concat([i]);\n        patches.push({\n          op: REMOVE,\n          path: path,\n          value: value\n        });\n        inversePatches.unshift({\n          op: ADD,\n          path: path,\n          value: value\n        });\n      }\n\n      i++;\n    });\n    i = 0;\n    copy_.forEach(function (value) {\n      if (!base_.has(value)) {\n        var path = basePath.concat([i]);\n        patches.push({\n          op: ADD,\n          path: path,\n          value: value\n        });\n        inversePatches.unshift({\n          op: REMOVE,\n          path: path,\n          value: value\n        });\n      }\n\n      i++;\n    });\n  }\n\n  function generateReplacementPatches_(baseValue, replacement, patches, inversePatches) {\n    patches.push({\n      op: REPLACE,\n      path: [],\n      value: replacement === NOTHING ? undefined : replacement\n    });\n    inversePatches.push({\n      op: REPLACE,\n      path: [],\n      value: baseValue\n    });\n  }\n\n  function applyPatches_(draft, patches) {\n    patches.forEach(function (patch) {\n      var path = patch.path,\n          op = patch.op;\n      var base = draft;\n\n      for (var i = 0; i < path.length - 1; i++) {\n        var parentType = getArchtype(base);\n        var p = path[i];\n\n        if (typeof p !== \"string\" && typeof p !== \"number\") {\n          p = \"\" + p;\n        } // See #738, avoid prototype pollution\n\n\n        if ((parentType === 0\n        /* Object */\n        || parentType === 1\n        /* Array */\n        ) && (p === \"__proto__\" || p === \"constructor\")) die(24);\n        if (typeof base === \"function\" && p === \"prototype\") die(24);\n        base = get(base, p);\n        if (typeof base !== \"object\") die(15, path.join(\"/\"));\n      }\n\n      var type = getArchtype(base);\n      var value = deepClonePatchValue(patch.value); // used to clone patch to ensure original patch is not modified, see #411\n\n      var key = path[path.length - 1];\n\n      switch (op) {\n        case REPLACE:\n          switch (type) {\n            case 2\n            /* Map */\n            :\n              return base.set(key, value);\n\n            /* istanbul ignore next */\n\n            case 3\n            /* Set */\n            :\n              die(16);\n\n            default:\n              // if value is an object, then it's assigned by reference\n              // in the following add or remove ops, the value field inside the patch will also be modifyed\n              // so we use value from the cloned patch\n              // @ts-ignore\n              return base[key] = value;\n          }\n\n        case ADD:\n          switch (type) {\n            case 1\n            /* Array */\n            :\n              return key === \"-\" ? base.push(value) : base.splice(key, 0, value);\n\n            case 2\n            /* Map */\n            :\n              return base.set(key, value);\n\n            case 3\n            /* Set */\n            :\n              return base.add(value);\n\n            default:\n              return base[key] = value;\n          }\n\n        case REMOVE:\n          switch (type) {\n            case 1\n            /* Array */\n            :\n              return base.splice(key, 1);\n\n            case 2\n            /* Map */\n            :\n              return base.delete(key);\n\n            case 3\n            /* Set */\n            :\n              return base.delete(patch.value);\n\n            default:\n              return delete base[key];\n          }\n\n        default:\n          die(17, op);\n      }\n    });\n    return draft;\n  }\n\n  function deepClonePatchValue(obj) {\n    if (!isDraftable(obj)) return obj;\n    if (Array.isArray(obj)) return obj.map(deepClonePatchValue);\n    if (isMap(obj)) return new Map(Array.from(obj.entries()).map(function (_ref3) {\n      var k = _ref3[0],\n          v = _ref3[1];\n      return [k, deepClonePatchValue(v)];\n    }));\n    if (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue));\n    var cloned = Object.create(Object.getPrototypeOf(obj));\n\n    for (var key in obj) {\n      cloned[key] = deepClonePatchValue(obj[key]);\n    }\n\n    if (has(obj, DRAFTABLE)) cloned[DRAFTABLE] = obj[DRAFTABLE];\n    return cloned;\n  }\n\n  function clonePatchValueIfNeeded(obj) {\n    if (isDraft(obj)) {\n      return deepClonePatchValue(obj);\n    } else return obj;\n  }\n\n  loadPlugin(\"Patches\", {\n    applyPatches_: applyPatches_,\n    generatePatches_: generatePatches_,\n    generateReplacementPatches_: generateReplacementPatches_\n  });\n}\n\n// types only!\nfunction enableMapSet() {\n  /* istanbul ignore next */\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  }; // Ugly hack to resolve #502 and inherit built in Map / Set\n\n\n  function __extends(d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = ( // @ts-ignore\n    __.prototype = b.prototype, new __());\n  }\n\n  var DraftMap = function (_super) {\n    __extends(DraftMap, _super); // Create class manually, cause #502\n\n\n    function DraftMap(target, parent) {\n      this[DRAFT_STATE] = {\n        type_: 2\n        /* Map */\n        ,\n        parent_: parent,\n        scope_: parent ? parent.scope_ : getCurrentScope(),\n        modified_: false,\n        finalized_: false,\n        copy_: undefined,\n        assigned_: undefined,\n        base_: target,\n        draft_: this,\n        isManual_: false,\n        revoked_: false\n      };\n      return this;\n    }\n\n    var p = DraftMap.prototype;\n    Object.defineProperty(p, \"size\", {\n      get: function get() {\n        return latest(this[DRAFT_STATE]).size;\n      } // enumerable: false,\n      // configurable: true\n\n    });\n\n    p.has = function (key) {\n      return latest(this[DRAFT_STATE]).has(key);\n    };\n\n    p.set = function (key, value) {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n\n      if (!latest(state).has(key) || latest(state).get(key) !== value) {\n        prepareMapCopy(state);\n        markChanged(state);\n        state.assigned_.set(key, true);\n        state.copy_.set(key, value);\n        state.assigned_.set(key, true);\n      }\n\n      return this;\n    };\n\n    p.delete = function (key) {\n      if (!this.has(key)) {\n        return false;\n      }\n\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      prepareMapCopy(state);\n      markChanged(state);\n\n      if (state.base_.has(key)) {\n        state.assigned_.set(key, false);\n      } else {\n        state.assigned_.delete(key);\n      }\n\n      state.copy_.delete(key);\n      return true;\n    };\n\n    p.clear = function () {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n\n      if (latest(state).size) {\n        prepareMapCopy(state);\n        markChanged(state);\n        state.assigned_ = new Map();\n        each(state.base_, function (key) {\n          state.assigned_.set(key, false);\n        });\n        state.copy_.clear();\n      }\n    };\n\n    p.forEach = function (cb, thisArg) {\n      var _this = this;\n\n      var state = this[DRAFT_STATE];\n      latest(state).forEach(function (_value, key, _map) {\n        cb.call(thisArg, _this.get(key), key, _this);\n      });\n    };\n\n    p.get = function (key) {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      var value = latest(state).get(key);\n\n      if (state.finalized_ || !isDraftable(value)) {\n        return value;\n      }\n\n      if (value !== state.base_.get(key)) {\n        return value; // either already drafted or reassigned\n      } // despite what it looks, this creates a draft only once, see above condition\n\n\n      var draft = createProxy(state.scope_.immer_, value, state);\n      prepareMapCopy(state);\n      state.copy_.set(key, draft);\n      return draft;\n    };\n\n    p.keys = function () {\n      return latest(this[DRAFT_STATE]).keys();\n    };\n\n    p.values = function () {\n      var _this2 = this,\n          _ref;\n\n      var iterator = this.keys();\n      return _ref = {}, _ref[iteratorSymbol] = function () {\n        return _this2.values();\n      }, _ref.next = function next() {\n        var r = iterator.next();\n        /* istanbul ignore next */\n\n        if (r.done) return r;\n\n        var value = _this2.get(r.value);\n\n        return {\n          done: false,\n          value: value\n        };\n      }, _ref;\n    };\n\n    p.entries = function () {\n      var _this3 = this,\n          _ref2;\n\n      var iterator = this.keys();\n      return _ref2 = {}, _ref2[iteratorSymbol] = function () {\n        return _this3.entries();\n      }, _ref2.next = function next() {\n        var r = iterator.next();\n        /* istanbul ignore next */\n\n        if (r.done) return r;\n\n        var value = _this3.get(r.value);\n\n        return {\n          done: false,\n          value: [r.value, value]\n        };\n      }, _ref2;\n    };\n\n    p[iteratorSymbol] = function () {\n      return this.entries();\n    };\n\n    return DraftMap;\n  }(Map);\n\n  function proxyMap_(target, parent) {\n    // @ts-ignore\n    return new DraftMap(target, parent);\n  }\n\n  function prepareMapCopy(state) {\n    if (!state.copy_) {\n      state.assigned_ = new Map();\n      state.copy_ = new Map(state.base_);\n    }\n  }\n\n  var DraftSet = function (_super) {\n    __extends(DraftSet, _super); // Create class manually, cause #502\n\n\n    function DraftSet(target, parent) {\n      this[DRAFT_STATE] = {\n        type_: 3\n        /* Set */\n        ,\n        parent_: parent,\n        scope_: parent ? parent.scope_ : getCurrentScope(),\n        modified_: false,\n        finalized_: false,\n        copy_: undefined,\n        base_: target,\n        draft_: this,\n        drafts_: new Map(),\n        revoked_: false,\n        isManual_: false\n      };\n      return this;\n    }\n\n    var p = DraftSet.prototype;\n    Object.defineProperty(p, \"size\", {\n      get: function get() {\n        return latest(this[DRAFT_STATE]).size;\n      } // enumerable: true,\n\n    });\n\n    p.has = function (value) {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state); // bit of trickery here, to be able to recognize both the value, and the draft of its value\n\n      if (!state.copy_) {\n        return state.base_.has(value);\n      }\n\n      if (state.copy_.has(value)) return true;\n      if (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value))) return true;\n      return false;\n    };\n\n    p.add = function (value) {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n\n      if (!this.has(value)) {\n        prepareSetCopy(state);\n        markChanged(state);\n        state.copy_.add(value);\n      }\n\n      return this;\n    };\n\n    p.delete = function (value) {\n      if (!this.has(value)) {\n        return false;\n      }\n\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      prepareSetCopy(state);\n      markChanged(state);\n      return state.copy_.delete(value) || (state.drafts_.has(value) ? state.copy_.delete(state.drafts_.get(value)) :\n      /* istanbul ignore next */\n      false);\n    };\n\n    p.clear = function () {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n\n      if (latest(state).size) {\n        prepareSetCopy(state);\n        markChanged(state);\n        state.copy_.clear();\n      }\n    };\n\n    p.values = function () {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      prepareSetCopy(state);\n      return state.copy_.values();\n    };\n\n    p.entries = function entries() {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      prepareSetCopy(state);\n      return state.copy_.entries();\n    };\n\n    p.keys = function () {\n      return this.values();\n    };\n\n    p[iteratorSymbol] = function () {\n      return this.values();\n    };\n\n    p.forEach = function forEach(cb, thisArg) {\n      var iterator = this.values();\n      var result = iterator.next();\n\n      while (!result.done) {\n        cb.call(thisArg, result.value, result.value, this);\n        result = iterator.next();\n      }\n    };\n\n    return DraftSet;\n  }(Set);\n\n  function proxySet_(target, parent) {\n    // @ts-ignore\n    return new DraftSet(target, parent);\n  }\n\n  function prepareSetCopy(state) {\n    if (!state.copy_) {\n      // create drafts for all entries to preserve insertion order\n      state.copy_ = new Set();\n      state.base_.forEach(function (value) {\n        if (isDraftable(value)) {\n          var draft = createProxy(state.scope_.immer_, value, state);\n          state.drafts_.set(value, draft);\n          state.copy_.add(draft);\n        } else {\n          state.copy_.add(value);\n        }\n      });\n    }\n  }\n\n  function assertUnrevoked(state\n  /*ES5State | MapState | SetState*/\n  ) {\n    if (state.revoked_) die(3, JSON.stringify(latest(state)));\n  }\n\n  loadPlugin(\"MapSet\", {\n    proxyMap_: proxyMap_,\n    proxySet_: proxySet_\n  });\n}\n\nfunction enableAllPlugins() {\n  enableES5();\n  enableMapSet();\n  enablePatches();\n}\n\nvar immer =\n/*#__PURE__*/\nnew Immer();\n/**\r\n * The `produce` function takes a value and a \"recipe function\" (whose\r\n * return value often depends on the base state). The recipe function is\r\n * free to mutate its first argument however it wants. All mutations are\r\n * only ever applied to a __copy__ of the base state.\r\n *\r\n * Pass only a function to create a \"curried producer\" which relieves you\r\n * from passing the recipe function every time.\r\n *\r\n * Only plain objects and arrays are made mutable. All other objects are\r\n * considered uncopyable.\r\n *\r\n * Note: This function is __bound__ to its `Immer` instance.\r\n *\r\n * @param {any} base - the initial state\r\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\r\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n * @returns {any} a new state, or the initial state if nothing was modified\r\n */\n\nvar produce = immer.produce;\n/**\r\n * Like `produce`, but `produceWithPatches` always returns a tuple\r\n * [nextState, patches, inversePatches] (instead of just the next state)\r\n */\n\nvar produceWithPatches =\n/*#__PURE__*/\nimmer.produceWithPatches.bind(immer);\n/**\r\n * Pass true to automatically freeze all copies created by Immer.\r\n *\r\n * Always freeze by default, even in production mode\r\n */\n\nvar setAutoFreeze =\n/*#__PURE__*/\nimmer.setAutoFreeze.bind(immer);\n/**\r\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n * always faster than using ES5 proxies.\r\n *\r\n * By default, feature detection is used, so calling this is rarely necessary.\r\n */\n\nvar setUseProxies =\n/*#__PURE__*/\nimmer.setUseProxies.bind(immer);\n/**\r\n * Apply an array of Immer patches to the first argument.\r\n *\r\n * This function is a producer, which means copy-on-write is in effect.\r\n */\n\nvar applyPatches =\n/*#__PURE__*/\nimmer.applyPatches.bind(immer);\n/**\r\n * Create an Immer draft from the given base state, which may be a draft itself.\r\n * The draft can be modified until you finalize it with the `finishDraft` function.\r\n */\n\nvar createDraft =\n/*#__PURE__*/\nimmer.createDraft.bind(immer);\n/**\r\n * Finalize an Immer draft from a `createDraft` call, returning the base state\r\n * (if no changes were made) or a modified copy. The draft must *not* be\r\n * mutated afterwards.\r\n *\r\n * Pass a function as the 2nd argument to generate Immer patches based on the\r\n * changes that were made.\r\n */\n\nvar finishDraft =\n/*#__PURE__*/\nimmer.finishDraft.bind(immer);\n/**\r\n * This function is actually a no-op, but can be used to cast an immutable type\r\n * to an draft type and make TypeScript happy\r\n *\r\n * @param value\r\n */\n\nfunction castDraft(value) {\n  return value;\n}\n/**\r\n * This function is actually a no-op, but can be used to cast a mutable type\r\n * to an immutable type and make TypeScript happy\r\n * @param value\r\n */\n\nfunction castImmutable(value) {\n  return value;\n}\n\nexports.Immer = Immer;\nexports.applyPatches = applyPatches;\nexports.castDraft = castDraft;\nexports.castImmutable = castImmutable;\nexports.createDraft = createDraft;\nexports.current = current;\nexports[\"default\"] = produce;\nexports.enableAllPlugins = enableAllPlugins;\nexports.enableES5 = enableES5;\nexports.enableMapSet = enableMapSet;\nexports.enablePatches = enablePatches;\nexports.finishDraft = finishDraft;\nexports.freeze = freeze;\nexports.immerable = DRAFTABLE;\nexports.isDraft = isDraft;\nexports.isDraftable = isDraftable;\nexports.nothing = NOTHING;\nexports.original = original;\nexports.produce = produce;\nexports.produceWithPatches = produceWithPatches;\nexports.setAutoFreeze = setAutoFreeze;\nexports.setUseProxies = setUseProxies;\n//# sourceMappingURL=immer.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/immer/dist/immer.cjs.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/immer/dist/index.js":
/*!******************************************!*\
  !*** ./node_modules/immer/dist/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./immer.cjs.development.js */ \"(ssr)/./node_modules/immer/dist/immer.cjs.development.js\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQ1k7O0FBRVosSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLGtJQUFzRDtBQUN4RCIsInNvdXJjZXMiOlsid2VicGFjazovL3BheWxvYWQvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbmRleC5qcz80YWE1Il0sInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pbW1lci5janMucHJvZHVjdGlvbi5taW4uanMnKVxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ltbWVyLmNqcy5kZXZlbG9wbWVudC5qcycpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/immer/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/immer/dist/immer.cjs.development.js":
/*!**********************************************************!*\
  !*** ./node_modules/immer/dist/immer.cjs.development.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar _ref;\n// Should be no imports here!\n// Some things that should be evaluated before all else...\n// We only want to know if non-polyfilled symbols are available\nvar hasSymbol = typeof Symbol !== \"undefined\" && typeof /*#__PURE__*/ Symbol(\"x\") === \"symbol\";\nvar hasMap = typeof Map !== \"undefined\";\nvar hasSet = typeof Set !== \"undefined\";\nvar hasProxies = typeof Proxy !== \"undefined\" && typeof Proxy.revocable !== \"undefined\" && typeof Reflect !== \"undefined\";\n/**\r\n * The sentinel value returned by producers to replace the draft with undefined.\r\n */ var NOTHING = hasSymbol ? /*#__PURE__*/ Symbol.for(\"immer-nothing\") : (_ref = {}, _ref[\"immer-nothing\"] = true, _ref);\n/**\r\n * To let Immer treat your class instances as plain immutable objects\r\n * (albeit with a custom prototype), you must define either an instance property\r\n * or a static property on each of your custom classes.\r\n *\r\n * Otherwise, your class instance will never be drafted, which means it won't be\r\n * safe to mutate in a produce callback.\r\n */ var DRAFTABLE = hasSymbol ? /*#__PURE__*/ Symbol.for(\"immer-draftable\") : \"__$immer_draftable\";\nvar DRAFT_STATE = hasSymbol ? /*#__PURE__*/ Symbol.for(\"immer-state\") : \"__$immer_state\"; // Even a polyfilled Symbol might provide Symbol.iterator\nvar iteratorSymbol = typeof Symbol != \"undefined\" && Symbol.iterator || \"@@iterator\";\nvar errors = {\n    0: \"Illegal state\",\n    1: \"Immer drafts cannot have computed properties\",\n    2: \"This object has been frozen and should not be mutated\",\n    3: function _(data) {\n        return \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + data;\n    },\n    4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n    5: \"Immer forbids circular references\",\n    6: \"The first or second argument to `produce` must be a function\",\n    7: \"The third argument to `produce` must be a function or undefined\",\n    8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n    9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n    10: \"The given draft is already finalized\",\n    11: \"Object.defineProperty() cannot be used on an Immer draft\",\n    12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n    13: \"Immer only supports deleting array indices\",\n    14: \"Immer only supports setting array indices and the 'length' property\",\n    15: function _(path) {\n        return \"Cannot apply patch, path doesn't resolve: \" + path;\n    },\n    16: 'Sets cannot have \"replace\" patches.',\n    17: function _(op) {\n        return \"Unsupported patch operation: \" + op;\n    },\n    18: function _(plugin) {\n        return \"The plugin for '\" + plugin + \"' has not been loaded into Immer. To enable the plugin, import and call `enable\" + plugin + \"()` when initializing your application.\";\n    },\n    20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n    21: function _(thing) {\n        return \"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '\" + thing + \"'\";\n    },\n    22: function _(thing) {\n        return \"'current' expects a draft, got: \" + thing;\n    },\n    23: function _(thing) {\n        return \"'original' expects a draft, got: \" + thing;\n    },\n    24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n};\nfunction die(error) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    {\n        var e = errors[error];\n        var msg = !e ? \"unknown error nr: \" + error : typeof e === \"function\" ? e.apply(null, args) : e;\n        throw new Error(\"[Immer] \" + msg);\n    }\n}\n/** Returns true if the given value is an Immer draft */ /*#__PURE__*/ function isDraft(value) {\n    return !!value && !!value[DRAFT_STATE];\n}\n/** Returns true if the given value can be drafted by Immer */ /*#__PURE__*/ function isDraftable(value) {\n    var _value$constructor;\n    if (!value) return false;\n    return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!((_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor[DRAFTABLE]) || isMap(value) || isSet(value);\n}\nvar objectCtorString = /*#__PURE__*/ Object.prototype.constructor.toString();\n/*#__PURE__*/ function isPlainObject(value) {\n    if (!value || typeof value !== \"object\") return false;\n    var proto = Object.getPrototypeOf(value);\n    if (proto === null) {\n        return true;\n    }\n    var Ctor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n    if (Ctor === Object) return true;\n    return typeof Ctor == \"function\" && Function.toString.call(Ctor) === objectCtorString;\n}\nfunction original(value) {\n    if (!isDraft(value)) die(23, value);\n    return value[DRAFT_STATE].base_;\n}\n/*#__PURE__*/ var ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function(obj) {\n    return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} : /* istanbul ignore next */ Object.getOwnPropertyNames;\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {\n    // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n    var res = {};\n    ownKeys(target).forEach(function(key) {\n        res[key] = Object.getOwnPropertyDescriptor(target, key);\n    });\n    return res;\n};\nfunction each(obj, iter, enumerableOnly) {\n    if (enumerableOnly === void 0) {\n        enumerableOnly = false;\n    }\n    if (getArchtype(obj) === 0) {\n        (enumerableOnly ? Object.keys : ownKeys)(obj).forEach(function(key) {\n            if (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj);\n        });\n    } else {\n        obj.forEach(function(entry, index) {\n            return iter(index, entry, obj);\n        });\n    }\n}\n/*#__PURE__*/ function getArchtype(thing) {\n    /* istanbul ignore next */ var state = thing[DRAFT_STATE];\n    return state ? state.type_ > 3 ? state.type_ - 4 // cause Object and Array map back from 4 and 5\n     : state.type_ // others are the same\n     : Array.isArray(thing) ? 1 : isMap(thing) ? 2 : isSet(thing) ? 3 : 0 /* Object */ ;\n}\n/*#__PURE__*/ function has(thing, prop) {\n    return getArchtype(thing) === 2 ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);\n}\n/*#__PURE__*/ function get(thing, prop) {\n    // @ts-ignore\n    return getArchtype(thing) === 2 ? thing.get(prop) : thing[prop];\n}\n/*#__PURE__*/ function set(thing, propOrOldValue, value) {\n    var t = getArchtype(thing);\n    if (t === 2) thing.set(propOrOldValue, value);\n    else if (t === 3) {\n        thing.add(value);\n    } else thing[propOrOldValue] = value;\n}\n/*#__PURE__*/ function is(x, y) {\n    // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (x === y) {\n        return x !== 0 || 1 / x === 1 / y;\n    } else {\n        return x !== x && y !== y;\n    }\n}\n/*#__PURE__*/ function isMap(target) {\n    return hasMap && target instanceof Map;\n}\n/*#__PURE__*/ function isSet(target) {\n    return hasSet && target instanceof Set;\n}\n/*#__PURE__*/ function latest(state) {\n    return state.copy_ || state.base_;\n}\n/*#__PURE__*/ function shallowCopy(base) {\n    if (Array.isArray(base)) return Array.prototype.slice.call(base);\n    var descriptors = getOwnPropertyDescriptors(base);\n    delete descriptors[DRAFT_STATE];\n    var keys = ownKeys(descriptors);\n    for(var i = 0; i < keys.length; i++){\n        var key = keys[i];\n        var desc = descriptors[key];\n        if (desc.writable === false) {\n            desc.writable = true;\n            desc.configurable = true;\n        } // like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n        // with libraries that trap values, like mobx or vue\n        // unlike object.assign, non-enumerables will be copied as well\n        if (desc.get || desc.set) descriptors[key] = {\n            configurable: true,\n            writable: true,\n            enumerable: desc.enumerable,\n            value: base[key]\n        };\n    }\n    return Object.create(Object.getPrototypeOf(base), descriptors);\n}\nfunction freeze(obj, deep) {\n    if (deep === void 0) {\n        deep = false;\n    }\n    if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj;\n    if (getArchtype(obj) > 1) {\n        obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;\n    }\n    Object.freeze(obj);\n    if (deep) each(obj, function(key, value) {\n        return freeze(value, true);\n    }, true);\n    return obj;\n}\nfunction dontMutateFrozenCollections() {\n    die(2);\n}\nfunction isFrozen(obj) {\n    if (obj == null || typeof obj !== \"object\") return true; // See #600, IE dies on non-objects in Object.isFrozen\n    return Object.isFrozen(obj);\n}\n/** Plugin utilities */ var plugins = {};\nfunction getPlugin(pluginKey) {\n    var plugin = plugins[pluginKey];\n    if (!plugin) {\n        die(18, pluginKey);\n    } // @ts-ignore\n    return plugin;\n}\nfunction loadPlugin(pluginKey, implementation) {\n    if (!plugins[pluginKey]) plugins[pluginKey] = implementation;\n}\nvar currentScope;\nfunction getCurrentScope() {\n    if (!currentScope) die(0);\n    return currentScope;\n}\nfunction createScope(parent_, immer_) {\n    return {\n        drafts_: [],\n        parent_: parent_,\n        immer_: immer_,\n        // Whenever the modified draft contains a draft from another scope, we\n        // need to prevent auto-freezing so the unowned draft can be finalized.\n        canAutoFreeze_: true,\n        unfinalizedDrafts_: 0\n    };\n}\nfunction usePatchesInScope(scope, patchListener) {\n    if (patchListener) {\n        getPlugin(\"Patches\"); // assert we have the plugin\n        scope.patches_ = [];\n        scope.inversePatches_ = [];\n        scope.patchListener_ = patchListener;\n    }\n}\nfunction revokeScope(scope) {\n    leaveScope(scope);\n    scope.drafts_.forEach(revokeDraft); // @ts-ignore\n    scope.drafts_ = null;\n}\nfunction leaveScope(scope) {\n    if (scope === currentScope) {\n        currentScope = scope.parent_;\n    }\n}\nfunction enterScope(immer) {\n    return currentScope = createScope(currentScope, immer);\n}\nfunction revokeDraft(draft) {\n    var state = draft[DRAFT_STATE];\n    if (state.type_ === 0 || state.type_ === 1) state.revoke_();\n    else state.revoked_ = true;\n}\nfunction processResult(result, scope) {\n    scope.unfinalizedDrafts_ = scope.drafts_.length;\n    var baseDraft = scope.drafts_[0];\n    var isReplaced = result !== undefined && result !== baseDraft;\n    if (!scope.immer_.useProxies_) getPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced);\n    if (isReplaced) {\n        if (baseDraft[DRAFT_STATE].modified_) {\n            revokeScope(scope);\n            die(4);\n        }\n        if (isDraftable(result)) {\n            // Finalize the result in case it contains (or is) a subset of the draft.\n            result = finalize(scope, result);\n            if (!scope.parent_) maybeFreeze(scope, result);\n        }\n        if (scope.patches_) {\n            getPlugin(\"Patches\").generateReplacementPatches_(baseDraft[DRAFT_STATE].base_, result, scope.patches_, scope.inversePatches_);\n        }\n    } else {\n        // Finalize the base draft.\n        result = finalize(scope, baseDraft, []);\n    }\n    revokeScope(scope);\n    if (scope.patches_) {\n        scope.patchListener_(scope.patches_, scope.inversePatches_);\n    }\n    return result !== NOTHING ? result : undefined;\n}\nfunction finalize(rootScope, value, path) {\n    // Don't recurse in tho recursive data structures\n    if (isFrozen(value)) return value;\n    var state = value[DRAFT_STATE]; // A plain object, might need freezing, might contain drafts\n    if (!state) {\n        each(value, function(key, childValue) {\n            return finalizeProperty(rootScope, state, value, key, childValue, path);\n        }, true // See #590, don't recurse into non-enumerable of non drafted objects\n        );\n        return value;\n    } // Never finalize drafts owned by another scope.\n    if (state.scope_ !== rootScope) return value; // Unmodified draft, return the (frozen) original\n    if (!state.modified_) {\n        maybeFreeze(rootScope, state.base_, true);\n        return state.base_;\n    } // Not finalized yet, let's do that now\n    if (!state.finalized_) {\n        state.finalized_ = true;\n        state.scope_.unfinalizedDrafts_--;\n        var result = state.type_ === 4 || state.type_ === 5 ? state.copy_ = shallowCopy(state.draft_) : state.copy_; // Finalize all children of the copy\n        // For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n        // To preserve insertion order in all cases we then clear the set\n        // And we let finalizeProperty know it needs to re-add non-draft children back to the target\n        var resultEach = result;\n        var isSet = false;\n        if (state.type_ === 3) {\n            resultEach = new Set(result);\n            result.clear();\n            isSet = true;\n        }\n        each(resultEach, function(key, childValue) {\n            return finalizeProperty(rootScope, state, result, key, childValue, path, isSet);\n        }); // everything inside is frozen, we can freeze here\n        maybeFreeze(rootScope, result, false); // first time finalizing, let's create those patches\n        if (path && rootScope.patches_) {\n            getPlugin(\"Patches\").generatePatches_(state, path, rootScope.patches_, rootScope.inversePatches_);\n        }\n    }\n    return state.copy_;\n}\nfunction finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {\n    if (childValue === targetObject) die(5);\n    if (isDraft(childValue)) {\n        var path = rootPath && parentState && parentState.type_ !== 3 && // Set objects are atomic since they have no keys.\n        !has(parentState.assigned_, prop) // Skip deep patches for assigned keys.\n         ? rootPath.concat(prop) : undefined; // Drafts owned by `scope` are finalized here.\n        var res = finalize(rootScope, childValue, path);\n        set(targetObject, prop, res); // Drafts from another scope must prevented to be frozen\n        // if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n        if (isDraft(res)) {\n            rootScope.canAutoFreeze_ = false;\n        } else return;\n    } else if (targetIsSet) {\n        targetObject.add(childValue);\n    } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n    if (isDraftable(childValue) && !isFrozen(childValue)) {\n        if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n            // optimization: if an object is not a draft, and we don't have to\n            // deepfreeze everything, and we are sure that no drafts are left in the remaining object\n            // cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n            // This benefits especially adding large data tree's without further processing.\n            // See add-data.js perf test\n            return;\n        }\n        finalize(rootScope, childValue); // immer deep freezes plain objects, so if there is no parent state, we freeze as well\n        if (!parentState || !parentState.scope_.parent_) maybeFreeze(rootScope, childValue);\n    }\n}\nfunction maybeFreeze(scope, value, deep) {\n    if (deep === void 0) {\n        deep = false;\n    }\n    // we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n    if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n        freeze(value, deep);\n    }\n}\n/**\r\n * Returns a new draft of the `base` object.\r\n *\r\n * The second argument is the parent draft-state (used internally).\r\n */ function createProxyProxy(base, parent) {\n    var isArray = Array.isArray(base);\n    var state = {\n        type_: isArray ? 1 : 0,\n        // Track which produce call this is associated with.\n        scope_: parent ? parent.scope_ : getCurrentScope(),\n        // True for both shallow and deep changes.\n        modified_: false,\n        // Used during finalization.\n        finalized_: false,\n        // Track which properties have been assigned (true) or deleted (false).\n        assigned_: {},\n        // The parent draft state.\n        parent_: parent,\n        // The base state.\n        base_: base,\n        // The base proxy.\n        draft_: null,\n        // The base copy with any updated values.\n        copy_: null,\n        // Called by the `produce` function.\n        revoke_: null,\n        isManual_: false\n    }; // the traps must target something, a bit like the 'real' base.\n    // but also, we need to be able to determine from the target what the relevant state is\n    // (to avoid creating traps per instance to capture the state in closure,\n    // and to avoid creating weird hidden properties as well)\n    // So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n    // Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n    var target = state;\n    var traps = objectTraps;\n    if (isArray) {\n        target = [\n            state\n        ];\n        traps = arrayTraps;\n    }\n    var _Proxy$revocable = Proxy.revocable(target, traps), revoke = _Proxy$revocable.revoke, proxy = _Proxy$revocable.proxy;\n    state.draft_ = proxy;\n    state.revoke_ = revoke;\n    return proxy;\n}\n/**\r\n * Object drafts\r\n */ var objectTraps = {\n    get: function get(state, prop) {\n        if (prop === DRAFT_STATE) return state;\n        var source = latest(state);\n        if (!has(source, prop)) {\n            // non-existing or non-own property...\n            return readPropFromProto(state, source, prop);\n        }\n        var value = source[prop];\n        if (state.finalized_ || !isDraftable(value)) {\n            return value;\n        } // Check for existing draft in modified state.\n        // Assigned values are never drafted. This catches any drafts we created, too.\n        if (value === peek(state.base_, prop)) {\n            prepareCopy(state);\n            return state.copy_[prop] = createProxy(state.scope_.immer_, value, state);\n        }\n        return value;\n    },\n    has: function has(state, prop) {\n        return prop in latest(state);\n    },\n    ownKeys: function ownKeys(state) {\n        return Reflect.ownKeys(latest(state));\n    },\n    set: function set(state, prop, value) {\n        var desc = getDescriptorFromProto(latest(state), prop);\n        if (desc === null || desc === void 0 ? void 0 : desc.set) {\n            // special case: if this write is captured by a setter, we have\n            // to trigger it with the correct context\n            desc.set.call(state.draft_, value);\n            return true;\n        }\n        if (!state.modified_) {\n            // the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n            // from setting an existing property with value undefined to undefined (which is not a change)\n            var current = peek(latest(state), prop); // special case, if we assigning the original value to a draft, we can ignore the assignment\n            var currentState = current === null || current === void 0 ? void 0 : current[DRAFT_STATE];\n            if (currentState && currentState.base_ === value) {\n                state.copy_[prop] = value;\n                state.assigned_[prop] = false;\n                return true;\n            }\n            if (is(value, current) && (value !== undefined || has(state.base_, prop))) return true;\n            prepareCopy(state);\n            markChanged(state);\n        }\n        if (state.copy_[prop] === value && (value !== undefined || prop in state.copy_) || // special case: NaN\n        Number.isNaN(value) && Number.isNaN(state.copy_[prop])) return true; // @ts-ignore\n        state.copy_[prop] = value;\n        state.assigned_[prop] = true;\n        return true;\n    },\n    deleteProperty: function deleteProperty(state, prop) {\n        // The `undefined` check is a fast path for pre-existing keys.\n        if (peek(state.base_, prop) !== undefined || prop in state.base_) {\n            state.assigned_[prop] = false;\n            prepareCopy(state);\n            markChanged(state);\n        } else {\n            // if an originally not assigned property was deleted\n            delete state.assigned_[prop];\n        } // @ts-ignore\n        if (state.copy_) delete state.copy_[prop];\n        return true;\n    },\n    // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n    // the same guarantee in ES5 mode.\n    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(state, prop) {\n        var owner = latest(state);\n        var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n        if (!desc) return desc;\n        return {\n            writable: true,\n            configurable: state.type_ !== 1 || prop !== \"length\",\n            enumerable: desc.enumerable,\n            value: owner[prop]\n        };\n    },\n    defineProperty: function defineProperty() {\n        die(11);\n    },\n    getPrototypeOf: function getPrototypeOf(state) {\n        return Object.getPrototypeOf(state.base_);\n    },\n    setPrototypeOf: function setPrototypeOf() {\n        die(12);\n    }\n};\n/**\r\n * Array drafts\r\n */ var arrayTraps = {};\neach(objectTraps, function(key, fn) {\n    // @ts-ignore\n    arrayTraps[key] = function() {\n        arguments[0] = arguments[0][0];\n        return fn.apply(this, arguments);\n    };\n});\narrayTraps.deleteProperty = function(state, prop) {\n    if (isNaN(parseInt(prop))) die(13); // @ts-ignore\n    return arrayTraps.set.call(this, state, prop, undefined);\n};\narrayTraps.set = function(state, prop, value) {\n    if (prop !== \"length\" && isNaN(parseInt(prop))) die(14);\n    return objectTraps.set.call(this, state[0], prop, value, state[0]);\n}; // Access a property without creating an Immer draft.\nfunction peek(draft, prop) {\n    var state = draft[DRAFT_STATE];\n    var source = state ? latest(state) : draft;\n    return source[prop];\n}\nfunction readPropFromProto(state, source, prop) {\n    var _desc$get;\n    var desc = getDescriptorFromProto(source, prop);\n    return desc ? \"value\" in desc ? desc.value : // prototype, we should invoke it with the draft as context!\n    (_desc$get = desc.get) === null || _desc$get === void 0 ? void 0 : _desc$get.call(state.draft_) : undefined;\n}\nfunction getDescriptorFromProto(source, prop) {\n    // 'in' checks proto!\n    if (!(prop in source)) return undefined;\n    var proto = Object.getPrototypeOf(source);\n    while(proto){\n        var desc = Object.getOwnPropertyDescriptor(proto, prop);\n        if (desc) return desc;\n        proto = Object.getPrototypeOf(proto);\n    }\n    return undefined;\n}\nfunction markChanged(state) {\n    if (!state.modified_) {\n        state.modified_ = true;\n        if (state.parent_) {\n            markChanged(state.parent_);\n        }\n    }\n}\nfunction prepareCopy(state) {\n    if (!state.copy_) {\n        state.copy_ = shallowCopy(state.base_);\n    }\n}\nvar Immer = /*#__PURE__*/ function() {\n    function Immer(config) {\n        var _this = this;\n        this.useProxies_ = hasProxies;\n        this.autoFreeze_ = true;\n        /**\r\n     * The `produce` function takes a value and a \"recipe function\" (whose\r\n     * return value often depends on the base state). The recipe function is\r\n     * free to mutate its first argument however it wants. All mutations are\r\n     * only ever applied to a __copy__ of the base state.\r\n     *\r\n     * Pass only a function to create a \"curried producer\" which relieves you\r\n     * from passing the recipe function every time.\r\n     *\r\n     * Only plain objects and arrays are made mutable. All other objects are\r\n     * considered uncopyable.\r\n     *\r\n     * Note: This function is __bound__ to its `Immer` instance.\r\n     *\r\n     * @param {any} base - the initial state\r\n     * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\r\n     * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n     * @returns {any} a new state, or the initial state if nothing was modified\r\n     */ this.produce = function(base, recipe, patchListener) {\n            // curried invocation\n            if (typeof base === \"function\" && typeof recipe !== \"function\") {\n                var defaultBase = recipe;\n                recipe = base;\n                var self = _this;\n                return function curriedProduce(base) {\n                    var _this2 = this;\n                    if (base === void 0) {\n                        base = defaultBase;\n                    }\n                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        args[_key - 1] = arguments[_key];\n                    }\n                    return self.produce(base, function(draft) {\n                        var _recipe;\n                        return (_recipe = recipe).call.apply(_recipe, [\n                            _this2,\n                            draft\n                        ].concat(args));\n                    }); // prettier-ignore\n                };\n            }\n            if (typeof recipe !== \"function\") die(6);\n            if (patchListener !== undefined && typeof patchListener !== \"function\") die(7);\n            var result; // Only plain objects, arrays, and \"immerable classes\" are drafted.\n            if (isDraftable(base)) {\n                var scope = enterScope(_this);\n                var proxy = createProxy(_this, base, undefined);\n                var hasError = true;\n                try {\n                    result = recipe(proxy);\n                    hasError = false;\n                } finally{\n                    // finally instead of catch + rethrow better preserves original stack\n                    if (hasError) revokeScope(scope);\n                    else leaveScope(scope);\n                }\n                if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                    return result.then(function(result) {\n                        usePatchesInScope(scope, patchListener);\n                        return processResult(result, scope);\n                    }, function(error) {\n                        revokeScope(scope);\n                        throw error;\n                    });\n                }\n                usePatchesInScope(scope, patchListener);\n                return processResult(result, scope);\n            } else if (!base || typeof base !== \"object\") {\n                result = recipe(base);\n                if (result === undefined) result = base;\n                if (result === NOTHING) result = undefined;\n                if (_this.autoFreeze_) freeze(result, true);\n                if (patchListener) {\n                    var p = [];\n                    var ip = [];\n                    getPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip);\n                    patchListener(p, ip);\n                }\n                return result;\n            } else die(21, base);\n        };\n        this.produceWithPatches = function(base, recipe) {\n            // curried invocation\n            if (typeof base === \"function\") {\n                return function(state) {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    return _this.produceWithPatches(state, function(draft) {\n                        return base.apply(void 0, [\n                            draft\n                        ].concat(args));\n                    });\n                };\n            }\n            var patches, inversePatches;\n            var result = _this.produce(base, recipe, function(p, ip) {\n                patches = p;\n                inversePatches = ip;\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then(function(nextState) {\n                    return [\n                        nextState,\n                        patches,\n                        inversePatches\n                    ];\n                });\n            }\n            return [\n                result,\n                patches,\n                inversePatches\n            ];\n        };\n        if (typeof (config === null || config === void 0 ? void 0 : config.useProxies) === \"boolean\") this.setUseProxies(config.useProxies);\n        if (typeof (config === null || config === void 0 ? void 0 : config.autoFreeze) === \"boolean\") this.setAutoFreeze(config.autoFreeze);\n    }\n    var _proto = Immer.prototype;\n    _proto.createDraft = function createDraft(base) {\n        if (!isDraftable(base)) die(8);\n        if (isDraft(base)) base = current(base);\n        var scope = enterScope(this);\n        var proxy = createProxy(this, base, undefined);\n        proxy[DRAFT_STATE].isManual_ = true;\n        leaveScope(scope);\n        return proxy;\n    };\n    _proto.finishDraft = function finishDraft(draft, patchListener) {\n        var state = draft && draft[DRAFT_STATE];\n        {\n            if (!state || !state.isManual_) die(9);\n            if (state.finalized_) die(10);\n        }\n        var scope = state.scope_;\n        usePatchesInScope(scope, patchListener);\n        return processResult(undefined, scope);\n    } /**\r\n   * Pass true to automatically freeze all copies created by Immer.\r\n   *\r\n   * By default, auto-freezing is enabled.\r\n   */ ;\n    _proto.setAutoFreeze = function setAutoFreeze(value) {\n        this.autoFreeze_ = value;\n    } /**\r\n   * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n   * always faster than using ES5 proxies.\r\n   *\r\n   * By default, feature detection is used, so calling this is rarely necessary.\r\n   */ ;\n    _proto.setUseProxies = function setUseProxies(value) {\n        if (value && !hasProxies) {\n            die(20);\n        }\n        this.useProxies_ = value;\n    };\n    _proto.applyPatches = function applyPatches(base, patches) {\n        // If a patch replaces the entire state, take that replacement as base\n        // before applying patches\n        var i;\n        for(i = patches.length - 1; i >= 0; i--){\n            var patch = patches[i];\n            if (patch.path.length === 0 && patch.op === \"replace\") {\n                base = patch.value;\n                break;\n            }\n        } // If there was a patch that replaced the entire state, start from the\n        // patch after that.\n        if (i > -1) {\n            patches = patches.slice(i + 1);\n        }\n        var applyPatchesImpl = getPlugin(\"Patches\").applyPatches_;\n        if (isDraft(base)) {\n            // N.B: never hits if some patch a replacement, patches are never drafts\n            return applyPatchesImpl(base, patches);\n        } // Otherwise, produce a copy of the base state.\n        return this.produce(base, function(draft) {\n            return applyPatchesImpl(draft, patches);\n        });\n    };\n    return Immer;\n}();\nfunction createProxy(immer, value, parent) {\n    // precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n    var draft = isMap(value) ? getPlugin(\"MapSet\").proxyMap_(value, parent) : isSet(value) ? getPlugin(\"MapSet\").proxySet_(value, parent) : immer.useProxies_ ? createProxyProxy(value, parent) : getPlugin(\"ES5\").createES5Proxy_(value, parent);\n    var scope = parent ? parent.scope_ : getCurrentScope();\n    scope.drafts_.push(draft);\n    return draft;\n}\nfunction current(value) {\n    if (!isDraft(value)) die(22, value);\n    return currentImpl(value);\n}\nfunction currentImpl(value) {\n    if (!isDraftable(value)) return value;\n    var state = value[DRAFT_STATE];\n    var copy;\n    var archType = getArchtype(value);\n    if (state) {\n        if (!state.modified_ && (state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state))) return state.base_; // Optimization: avoid generating new drafts during copying\n        state.finalized_ = true;\n        copy = copyHelper(value, archType);\n        state.finalized_ = false;\n    } else {\n        copy = copyHelper(value, archType);\n    }\n    each(copy, function(key, childValue) {\n        if (state && get(state.base_, key) === childValue) return; // no need to copy or search in something that didn't change\n        set(copy, key, currentImpl(childValue));\n    }); // In the future, we might consider freezing here, based on the current settings\n    return archType === 3 ? new Set(copy) : copy;\n}\nfunction copyHelper(value, archType) {\n    // creates a shallow copy, even if it is a map or set\n    switch(archType){\n        case 2:\n            return new Map(value);\n        case 3:\n            // Set will be cloned as array temporarily, so that we can replace individual items\n            return Array.from(value);\n    }\n    return shallowCopy(value);\n}\nfunction enableES5() {\n    function willFinalizeES5_(scope, result, isReplaced) {\n        if (!isReplaced) {\n            if (scope.patches_) {\n                markChangesRecursively(scope.drafts_[0]);\n            } // This is faster when we don't care about which attributes changed.\n            markChangesSweep(scope.drafts_);\n        } else if (isDraft(result) && result[DRAFT_STATE].scope_ === scope) {\n            markChangesSweep(scope.drafts_);\n        }\n    }\n    function createES5Draft(isArray, base) {\n        if (isArray) {\n            var draft = new Array(base.length);\n            for(var i = 0; i < base.length; i++){\n                Object.defineProperty(draft, \"\" + i, proxyProperty(i, true));\n            }\n            return draft;\n        } else {\n            var _descriptors = getOwnPropertyDescriptors(base);\n            delete _descriptors[DRAFT_STATE];\n            var keys = ownKeys(_descriptors);\n            for(var _i = 0; _i < keys.length; _i++){\n                var key = keys[_i];\n                _descriptors[key] = proxyProperty(key, isArray || !!_descriptors[key].enumerable);\n            }\n            return Object.create(Object.getPrototypeOf(base), _descriptors);\n        }\n    }\n    function createES5Proxy_(base, parent) {\n        var isArray = Array.isArray(base);\n        var draft = createES5Draft(isArray, base);\n        var state = {\n            type_: isArray ? 5 : 4,\n            scope_: parent ? parent.scope_ : getCurrentScope(),\n            modified_: false,\n            finalized_: false,\n            assigned_: {},\n            parent_: parent,\n            // base is the object we are drafting\n            base_: base,\n            // draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n            draft_: draft,\n            copy_: null,\n            revoked_: false,\n            isManual_: false\n        };\n        Object.defineProperty(draft, DRAFT_STATE, {\n            value: state,\n            // enumerable: false <- the default\n            writable: true\n        });\n        return draft;\n    } // property descriptors are recycled to make sure we don't create a get and set closure per property,\n    // but share them all instead\n    var descriptors = {};\n    function proxyProperty(prop, enumerable) {\n        var desc = descriptors[prop];\n        if (desc) {\n            desc.enumerable = enumerable;\n        } else {\n            descriptors[prop] = desc = {\n                configurable: true,\n                enumerable: enumerable,\n                get: function get() {\n                    var state = this[DRAFT_STATE];\n                    assertUnrevoked(state); // @ts-ignore\n                    return objectTraps.get(state, prop);\n                },\n                set: function set(value) {\n                    var state = this[DRAFT_STATE];\n                    assertUnrevoked(state); // @ts-ignore\n                    objectTraps.set(state, prop, value);\n                }\n            };\n        }\n        return desc;\n    } // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n    function markChangesSweep(drafts) {\n        // The natural order of drafts in the `scope` array is based on when they\n        // were accessed. By processing drafts in reverse natural order, we have a\n        // better chance of processing leaf nodes first. When a leaf node is known to\n        // have changed, we can avoid any traversal of its ancestor nodes.\n        for(var i = drafts.length - 1; i >= 0; i--){\n            var state = drafts[i][DRAFT_STATE];\n            if (!state.modified_) {\n                switch(state.type_){\n                    case 5:\n                        if (hasArrayChanges(state)) markChanged(state);\n                        break;\n                    case 4:\n                        if (hasObjectChanges(state)) markChanged(state);\n                        break;\n                }\n            }\n        }\n    }\n    function markChangesRecursively(object) {\n        if (!object || typeof object !== \"object\") return;\n        var state = object[DRAFT_STATE];\n        if (!state) return;\n        var base_ = state.base_, draft_ = state.draft_, assigned_ = state.assigned_, type_ = state.type_;\n        if (type_ === 4) {\n            // Look for added keys.\n            // probably there is a faster way to detect changes, as sweep + recurse seems to do some\n            // unnecessary work.\n            // also: probably we can store the information we detect here, to speed up tree finalization!\n            each(draft_, function(key) {\n                if (key === DRAFT_STATE) return; // The `undefined` check is a fast path for pre-existing keys.\n                if (base_[key] === undefined && !has(base_, key)) {\n                    assigned_[key] = true;\n                    markChanged(state);\n                } else if (!assigned_[key]) {\n                    // Only untouched properties trigger recursion.\n                    markChangesRecursively(draft_[key]);\n                }\n            }); // Look for removed keys.\n            each(base_, function(key) {\n                // The `undefined` check is a fast path for pre-existing keys.\n                if (draft_[key] === undefined && !has(draft_, key)) {\n                    assigned_[key] = false;\n                    markChanged(state);\n                }\n            });\n        } else if (type_ === 5) {\n            if (hasArrayChanges(state)) {\n                markChanged(state);\n                assigned_.length = true;\n            }\n            if (draft_.length < base_.length) {\n                for(var i = draft_.length; i < base_.length; i++){\n                    assigned_[i] = false;\n                }\n            } else {\n                for(var _i2 = base_.length; _i2 < draft_.length; _i2++){\n                    assigned_[_i2] = true;\n                }\n            } // Minimum count is enough, the other parts has been processed.\n            var min = Math.min(draft_.length, base_.length);\n            for(var _i3 = 0; _i3 < min; _i3++){\n                // Only untouched indices trigger recursion.\n                if (!draft_.hasOwnProperty(_i3)) {\n                    assigned_[_i3] = true;\n                }\n                if (assigned_[_i3] === undefined) markChangesRecursively(draft_[_i3]);\n            }\n        }\n    }\n    function hasObjectChanges(state) {\n        var base_ = state.base_, draft_ = state.draft_; // Search for added keys and changed keys. Start at the back, because\n        // non-numeric keys are ordered by time of definition on the object.\n        var keys = ownKeys(draft_);\n        for(var i = keys.length - 1; i >= 0; i--){\n            var key = keys[i];\n            if (key === DRAFT_STATE) continue;\n            var baseValue = base_[key]; // The `undefined` check is a fast path for pre-existing keys.\n            if (baseValue === undefined && !has(base_, key)) {\n                return true;\n            } else {\n                var value = draft_[key];\n                var _state = value && value[DRAFT_STATE];\n                if (_state ? _state.base_ !== baseValue : !is(value, baseValue)) {\n                    return true;\n                }\n            }\n        } // At this point, no keys were added or changed.\n        // Compare key count to determine if keys were deleted.\n        var baseIsDraft = !!base_[DRAFT_STATE];\n        return keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1); // + 1 to correct for DRAFT_STATE\n    }\n    function hasArrayChanges(state) {\n        var draft_ = state.draft_;\n        if (draft_.length !== state.base_.length) return true; // See #116\n        // If we first shorten the length, our array interceptors will be removed.\n        // If after that new items are added, result in the same original length,\n        // those last items will have no intercepting property.\n        // So if there is no own descriptor on the last position, we know that items were removed and added\n        // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n        // the last one\n        // last descriptor can be not a trap, if the array was extended\n        var descriptor = Object.getOwnPropertyDescriptor(draft_, draft_.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n        if (descriptor && !descriptor.get) return true; // if we miss a property, it has been deleted, so array probobaly changed\n        for(var i = 0; i < draft_.length; i++){\n            if (!draft_.hasOwnProperty(i)) return true;\n        } // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n        return false;\n    }\n    function hasChanges_(state) {\n        return state.type_ === 4 ? hasObjectChanges(state) : hasArrayChanges(state);\n    }\n    function assertUnrevoked(state) {\n        if (state.revoked_) die(3, JSON.stringify(latest(state)));\n    }\n    loadPlugin(\"ES5\", {\n        createES5Proxy_: createES5Proxy_,\n        willFinalizeES5_: willFinalizeES5_,\n        hasChanges_: hasChanges_\n    });\n}\nfunction enablePatches() {\n    var REPLACE = \"replace\";\n    var ADD = \"add\";\n    var REMOVE = \"remove\";\n    function generatePatches_(state, basePath, patches, inversePatches) {\n        switch(state.type_){\n            case 0:\n            case 4:\n            case 2:\n                return generatePatchesFromAssigned(state, basePath, patches, inversePatches);\n            case 5:\n            case 1:\n                return generateArrayPatches(state, basePath, patches, inversePatches);\n            case 3:\n                return generateSetPatches(state, basePath, patches, inversePatches);\n        }\n    }\n    function generateArrayPatches(state, basePath, patches, inversePatches) {\n        var base_ = state.base_, assigned_ = state.assigned_;\n        var copy_ = state.copy_; // Reduce complexity by ensuring `base` is never longer.\n        if (copy_.length < base_.length) {\n            var _ref = [\n                copy_,\n                base_\n            ];\n            base_ = _ref[0];\n            copy_ = _ref[1];\n            var _ref2 = [\n                inversePatches,\n                patches\n            ];\n            patches = _ref2[0];\n            inversePatches = _ref2[1];\n        } // Process replaced indices.\n        for(var i = 0; i < base_.length; i++){\n            if (assigned_[i] && copy_[i] !== base_[i]) {\n                var path = basePath.concat([\n                    i\n                ]);\n                patches.push({\n                    op: REPLACE,\n                    path: path,\n                    // Need to maybe clone it, as it can in fact be the original value\n                    // due to the base/copy inversion at the start of this function\n                    value: clonePatchValueIfNeeded(copy_[i])\n                });\n                inversePatches.push({\n                    op: REPLACE,\n                    path: path,\n                    value: clonePatchValueIfNeeded(base_[i])\n                });\n            }\n        } // Process added indices.\n        for(var _i = base_.length; _i < copy_.length; _i++){\n            var _path = basePath.concat([\n                _i\n            ]);\n            patches.push({\n                op: ADD,\n                path: _path,\n                // Need to maybe clone it, as it can in fact be the original value\n                // due to the base/copy inversion at the start of this function\n                value: clonePatchValueIfNeeded(copy_[_i])\n            });\n        }\n        if (base_.length < copy_.length) {\n            inversePatches.push({\n                op: REPLACE,\n                path: basePath.concat([\n                    \"length\"\n                ]),\n                value: base_.length\n            });\n        }\n    } // This is used for both Map objects and normal objects.\n    function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {\n        var base_ = state.base_, copy_ = state.copy_;\n        each(state.assigned_, function(key, assignedValue) {\n            var origValue = get(base_, key);\n            var value = get(copy_, key);\n            var op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD;\n            if (origValue === value && op === REPLACE) return;\n            var path = basePath.concat(key);\n            patches.push(op === REMOVE ? {\n                op: op,\n                path: path\n            } : {\n                op: op,\n                path: path,\n                value: value\n            });\n            inversePatches.push(op === ADD ? {\n                op: REMOVE,\n                path: path\n            } : op === REMOVE ? {\n                op: ADD,\n                path: path,\n                value: clonePatchValueIfNeeded(origValue)\n            } : {\n                op: REPLACE,\n                path: path,\n                value: clonePatchValueIfNeeded(origValue)\n            });\n        });\n    }\n    function generateSetPatches(state, basePath, patches, inversePatches) {\n        var base_ = state.base_, copy_ = state.copy_;\n        var i = 0;\n        base_.forEach(function(value) {\n            if (!copy_.has(value)) {\n                var path = basePath.concat([\n                    i\n                ]);\n                patches.push({\n                    op: REMOVE,\n                    path: path,\n                    value: value\n                });\n                inversePatches.unshift({\n                    op: ADD,\n                    path: path,\n                    value: value\n                });\n            }\n            i++;\n        });\n        i = 0;\n        copy_.forEach(function(value) {\n            if (!base_.has(value)) {\n                var path = basePath.concat([\n                    i\n                ]);\n                patches.push({\n                    op: ADD,\n                    path: path,\n                    value: value\n                });\n                inversePatches.unshift({\n                    op: REMOVE,\n                    path: path,\n                    value: value\n                });\n            }\n            i++;\n        });\n    }\n    function generateReplacementPatches_(baseValue, replacement, patches, inversePatches) {\n        patches.push({\n            op: REPLACE,\n            path: [],\n            value: replacement === NOTHING ? undefined : replacement\n        });\n        inversePatches.push({\n            op: REPLACE,\n            path: [],\n            value: baseValue\n        });\n    }\n    function applyPatches_(draft, patches) {\n        patches.forEach(function(patch) {\n            var path = patch.path, op = patch.op;\n            var base = draft;\n            for(var i = 0; i < path.length - 1; i++){\n                var parentType = getArchtype(base);\n                var p = path[i];\n                if (typeof p !== \"string\" && typeof p !== \"number\") {\n                    p = \"\" + p;\n                } // See #738, avoid prototype pollution\n                if ((parentType === 0 || parentType === 1) && (p === \"__proto__\" || p === \"constructor\")) die(24);\n                if (typeof base === \"function\" && p === \"prototype\") die(24);\n                base = get(base, p);\n                if (typeof base !== \"object\") die(15, path.join(\"/\"));\n            }\n            var type = getArchtype(base);\n            var value = deepClonePatchValue(patch.value); // used to clone patch to ensure original patch is not modified, see #411\n            var key = path[path.length - 1];\n            switch(op){\n                case REPLACE:\n                    switch(type){\n                        case 2:\n                            return base.set(key, value);\n                        /* istanbul ignore next */ case 3:\n                            die(16);\n                        default:\n                            // if value is an object, then it's assigned by reference\n                            // in the following add or remove ops, the value field inside the patch will also be modifyed\n                            // so we use value from the cloned patch\n                            // @ts-ignore\n                            return base[key] = value;\n                    }\n                case ADD:\n                    switch(type){\n                        case 1:\n                            return key === \"-\" ? base.push(value) : base.splice(key, 0, value);\n                        case 2:\n                            return base.set(key, value);\n                        case 3:\n                            return base.add(value);\n                        default:\n                            return base[key] = value;\n                    }\n                case REMOVE:\n                    switch(type){\n                        case 1:\n                            return base.splice(key, 1);\n                        case 2:\n                            return base.delete(key);\n                        case 3:\n                            return base.delete(patch.value);\n                        default:\n                            return delete base[key];\n                    }\n                default:\n                    die(17, op);\n            }\n        });\n        return draft;\n    }\n    function deepClonePatchValue(obj) {\n        if (!isDraftable(obj)) return obj;\n        if (Array.isArray(obj)) return obj.map(deepClonePatchValue);\n        if (isMap(obj)) return new Map(Array.from(obj.entries()).map(function(_ref3) {\n            var k = _ref3[0], v = _ref3[1];\n            return [\n                k,\n                deepClonePatchValue(v)\n            ];\n        }));\n        if (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue));\n        var cloned = Object.create(Object.getPrototypeOf(obj));\n        for(var key in obj){\n            cloned[key] = deepClonePatchValue(obj[key]);\n        }\n        if (has(obj, DRAFTABLE)) cloned[DRAFTABLE] = obj[DRAFTABLE];\n        return cloned;\n    }\n    function clonePatchValueIfNeeded(obj) {\n        if (isDraft(obj)) {\n            return deepClonePatchValue(obj);\n        } else return obj;\n    }\n    loadPlugin(\"Patches\", {\n        applyPatches_: applyPatches_,\n        generatePatches_: generatePatches_,\n        generateReplacementPatches_: generateReplacementPatches_\n    });\n}\n// types only!\nfunction enableMapSet() {\n    /* istanbul ignore next */ var _extendStatics = function extendStatics(d, b) {\n        _extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b){\n                if (b.hasOwnProperty(p)) d[p] = b[p];\n            }\n        };\n        return _extendStatics(d, b);\n    }; // Ugly hack to resolve #502 and inherit built in Map / Set\n    function __extends(d, b) {\n        _extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = (__.prototype = b.prototype, new __());\n    }\n    var DraftMap = function(_super) {\n        __extends(DraftMap, _super); // Create class manually, cause #502\n        function DraftMap(target, parent) {\n            this[DRAFT_STATE] = {\n                type_: 2,\n                parent_: parent,\n                scope_: parent ? parent.scope_ : getCurrentScope(),\n                modified_: false,\n                finalized_: false,\n                copy_: undefined,\n                assigned_: undefined,\n                base_: target,\n                draft_: this,\n                isManual_: false,\n                revoked_: false\n            };\n            return this;\n        }\n        var p = DraftMap.prototype;\n        Object.defineProperty(p, \"size\", {\n            get: function get() {\n                return latest(this[DRAFT_STATE]).size;\n            } // enumerable: false,\n        });\n        p.has = function(key) {\n            return latest(this[DRAFT_STATE]).has(key);\n        };\n        p.set = function(key, value) {\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            if (!latest(state).has(key) || latest(state).get(key) !== value) {\n                prepareMapCopy(state);\n                markChanged(state);\n                state.assigned_.set(key, true);\n                state.copy_.set(key, value);\n                state.assigned_.set(key, true);\n            }\n            return this;\n        };\n        p.delete = function(key) {\n            if (!this.has(key)) {\n                return false;\n            }\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            prepareMapCopy(state);\n            markChanged(state);\n            if (state.base_.has(key)) {\n                state.assigned_.set(key, false);\n            } else {\n                state.assigned_.delete(key);\n            }\n            state.copy_.delete(key);\n            return true;\n        };\n        p.clear = function() {\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            if (latest(state).size) {\n                prepareMapCopy(state);\n                markChanged(state);\n                state.assigned_ = new Map();\n                each(state.base_, function(key) {\n                    state.assigned_.set(key, false);\n                });\n                state.copy_.clear();\n            }\n        };\n        p.forEach = function(cb, thisArg) {\n            var _this = this;\n            var state = this[DRAFT_STATE];\n            latest(state).forEach(function(_value, key, _map) {\n                cb.call(thisArg, _this.get(key), key, _this);\n            });\n        };\n        p.get = function(key) {\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            var value = latest(state).get(key);\n            if (state.finalized_ || !isDraftable(value)) {\n                return value;\n            }\n            if (value !== state.base_.get(key)) {\n                return value; // either already drafted or reassigned\n            } // despite what it looks, this creates a draft only once, see above condition\n            var draft = createProxy(state.scope_.immer_, value, state);\n            prepareMapCopy(state);\n            state.copy_.set(key, draft);\n            return draft;\n        };\n        p.keys = function() {\n            return latest(this[DRAFT_STATE]).keys();\n        };\n        p.values = function() {\n            var _this2 = this, _ref;\n            var iterator = this.keys();\n            return _ref = {}, _ref[iteratorSymbol] = function() {\n                return _this2.values();\n            }, _ref.next = function next() {\n                var r = iterator.next();\n                /* istanbul ignore next */ if (r.done) return r;\n                var value = _this2.get(r.value);\n                return {\n                    done: false,\n                    value: value\n                };\n            }, _ref;\n        };\n        p.entries = function() {\n            var _this3 = this, _ref2;\n            var iterator = this.keys();\n            return _ref2 = {}, _ref2[iteratorSymbol] = function() {\n                return _this3.entries();\n            }, _ref2.next = function next() {\n                var r = iterator.next();\n                /* istanbul ignore next */ if (r.done) return r;\n                var value = _this3.get(r.value);\n                return {\n                    done: false,\n                    value: [\n                        r.value,\n                        value\n                    ]\n                };\n            }, _ref2;\n        };\n        p[iteratorSymbol] = function() {\n            return this.entries();\n        };\n        return DraftMap;\n    }(Map);\n    function proxyMap_(target, parent) {\n        // @ts-ignore\n        return new DraftMap(target, parent);\n    }\n    function prepareMapCopy(state) {\n        if (!state.copy_) {\n            state.assigned_ = new Map();\n            state.copy_ = new Map(state.base_);\n        }\n    }\n    var DraftSet = function(_super) {\n        __extends(DraftSet, _super); // Create class manually, cause #502\n        function DraftSet(target, parent) {\n            this[DRAFT_STATE] = {\n                type_: 3,\n                parent_: parent,\n                scope_: parent ? parent.scope_ : getCurrentScope(),\n                modified_: false,\n                finalized_: false,\n                copy_: undefined,\n                base_: target,\n                draft_: this,\n                drafts_: new Map(),\n                revoked_: false,\n                isManual_: false\n            };\n            return this;\n        }\n        var p = DraftSet.prototype;\n        Object.defineProperty(p, \"size\", {\n            get: function get() {\n                return latest(this[DRAFT_STATE]).size;\n            } // enumerable: true,\n        });\n        p.has = function(value) {\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state); // bit of trickery here, to be able to recognize both the value, and the draft of its value\n            if (!state.copy_) {\n                return state.base_.has(value);\n            }\n            if (state.copy_.has(value)) return true;\n            if (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value))) return true;\n            return false;\n        };\n        p.add = function(value) {\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            if (!this.has(value)) {\n                prepareSetCopy(state);\n                markChanged(state);\n                state.copy_.add(value);\n            }\n            return this;\n        };\n        p.delete = function(value) {\n            if (!this.has(value)) {\n                return false;\n            }\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            prepareSetCopy(state);\n            markChanged(state);\n            return state.copy_.delete(value) || (state.drafts_.has(value) ? state.copy_.delete(state.drafts_.get(value)) : /* istanbul ignore next */ false);\n        };\n        p.clear = function() {\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            if (latest(state).size) {\n                prepareSetCopy(state);\n                markChanged(state);\n                state.copy_.clear();\n            }\n        };\n        p.values = function() {\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            prepareSetCopy(state);\n            return state.copy_.values();\n        };\n        p.entries = function entries() {\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            prepareSetCopy(state);\n            return state.copy_.entries();\n        };\n        p.keys = function() {\n            return this.values();\n        };\n        p[iteratorSymbol] = function() {\n            return this.values();\n        };\n        p.forEach = function forEach(cb, thisArg) {\n            var iterator = this.values();\n            var result = iterator.next();\n            while(!result.done){\n                cb.call(thisArg, result.value, result.value, this);\n                result = iterator.next();\n            }\n        };\n        return DraftSet;\n    }(Set);\n    function proxySet_(target, parent) {\n        // @ts-ignore\n        return new DraftSet(target, parent);\n    }\n    function prepareSetCopy(state) {\n        if (!state.copy_) {\n            // create drafts for all entries to preserve insertion order\n            state.copy_ = new Set();\n            state.base_.forEach(function(value) {\n                if (isDraftable(value)) {\n                    var draft = createProxy(state.scope_.immer_, value, state);\n                    state.drafts_.set(value, draft);\n                    state.copy_.add(draft);\n                } else {\n                    state.copy_.add(value);\n                }\n            });\n        }\n    }\n    function assertUnrevoked(state) {\n        if (state.revoked_) die(3, JSON.stringify(latest(state)));\n    }\n    loadPlugin(\"MapSet\", {\n        proxyMap_: proxyMap_,\n        proxySet_: proxySet_\n    });\n}\nfunction enableAllPlugins() {\n    enableES5();\n    enableMapSet();\n    enablePatches();\n}\nvar immer = /*#__PURE__*/ new Immer();\n/**\r\n * The `produce` function takes a value and a \"recipe function\" (whose\r\n * return value often depends on the base state). The recipe function is\r\n * free to mutate its first argument however it wants. All mutations are\r\n * only ever applied to a __copy__ of the base state.\r\n *\r\n * Pass only a function to create a \"curried producer\" which relieves you\r\n * from passing the recipe function every time.\r\n *\r\n * Only plain objects and arrays are made mutable. All other objects are\r\n * considered uncopyable.\r\n *\r\n * Note: This function is __bound__ to its `Immer` instance.\r\n *\r\n * @param {any} base - the initial state\r\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\r\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n * @returns {any} a new state, or the initial state if nothing was modified\r\n */ var produce = immer.produce;\n/**\r\n * Like `produce`, but `produceWithPatches` always returns a tuple\r\n * [nextState, patches, inversePatches] (instead of just the next state)\r\n */ var produceWithPatches = /*#__PURE__*/ immer.produceWithPatches.bind(immer);\n/**\r\n * Pass true to automatically freeze all copies created by Immer.\r\n *\r\n * Always freeze by default, even in production mode\r\n */ var setAutoFreeze = /*#__PURE__*/ immer.setAutoFreeze.bind(immer);\n/**\r\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n * always faster than using ES5 proxies.\r\n *\r\n * By default, feature detection is used, so calling this is rarely necessary.\r\n */ var setUseProxies = /*#__PURE__*/ immer.setUseProxies.bind(immer);\n/**\r\n * Apply an array of Immer patches to the first argument.\r\n *\r\n * This function is a producer, which means copy-on-write is in effect.\r\n */ var applyPatches = /*#__PURE__*/ immer.applyPatches.bind(immer);\n/**\r\n * Create an Immer draft from the given base state, which may be a draft itself.\r\n * The draft can be modified until you finalize it with the `finishDraft` function.\r\n */ var createDraft = /*#__PURE__*/ immer.createDraft.bind(immer);\n/**\r\n * Finalize an Immer draft from a `createDraft` call, returning the base state\r\n * (if no changes were made) or a modified copy. The draft must *not* be\r\n * mutated afterwards.\r\n *\r\n * Pass a function as the 2nd argument to generate Immer patches based on the\r\n * changes that were made.\r\n */ var finishDraft = /*#__PURE__*/ immer.finishDraft.bind(immer);\n/**\r\n * This function is actually a no-op, but can be used to cast an immutable type\r\n * to an draft type and make TypeScript happy\r\n *\r\n * @param value\r\n */ function castDraft(value) {\n    return value;\n}\n/**\r\n * This function is actually a no-op, but can be used to cast a mutable type\r\n * to an immutable type and make TypeScript happy\r\n * @param value\r\n */ function castImmutable(value) {\n    return value;\n}\nexports.Immer = Immer;\nexports.applyPatches = applyPatches;\nexports.castDraft = castDraft;\nexports.castImmutable = castImmutable;\nexports.createDraft = createDraft;\nexports.current = current;\nexports[\"default\"] = produce;\nexports.enableAllPlugins = enableAllPlugins;\nexports.enableES5 = enableES5;\nexports.enableMapSet = enableMapSet;\nexports.enablePatches = enablePatches;\nexports.finishDraft = finishDraft;\nexports.freeze = freeze;\nexports.immerable = DRAFTABLE;\nexports.isDraft = isDraft;\nexports.isDraftable = isDraftable;\nexports.nothing = NOTHING;\nexports.original = original;\nexports.produce = produce;\nexports.produceWithPatches = produceWithPatches;\nexports.setAutoFreeze = setAutoFreeze;\nexports.setUseProxies = setUseProxies; //# sourceMappingURL=immer.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/immer/dist/immer.cjs.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/immer/dist/index.js":
/*!******************************************!*\
  !*** ./node_modules/immer/dist/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./immer.cjs.development.js */ \"(rsc)/./node_modules/immer/dist/immer.cjs.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFDQTtBQUVBLElBQUlBLEtBQXlCLEVBQWMsRUFFMUMsTUFBTTtJQUNMQyxrSUFBeUI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXlsb2FkLy4vbm9kZV9tb2R1bGVzL2ltbWVyL2Rpc3QvaW5kZXguanM/NzdmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc3RyaWN0J1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaW1tZXIuY2pzLnByb2R1Y3Rpb24ubWluLmpzJylcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pbW1lci5janMuZGV2ZWxvcG1lbnQuanMnKVxufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/immer/dist/index.js\n");

/***/ })

};
;